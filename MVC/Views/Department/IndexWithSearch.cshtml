@model MVC.Models.DepartmentSearchResultViewModel

@{
    ViewData["Title"] = "Departman Yönetimi";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>@ViewData["Title"]</h1>
    <div>
        <!-- Export Dropdown -->
        <div class="btn-group me-2" role="group">
            <button type="button" class="btn btn-success dropdown-toggle" data-bs-toggle="dropdown">
                <i class="fas fa-download"></i> Rapor Export
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" asp-action="ExportList">
                    <i class="fas fa-table"></i> Departman Listesi
                </a></li>
                <li><a class="dropdown-item" asp-action="ExportOrganizationChart">
                    <i class="fas fa-sitemap"></i> Organizasyon Şeması
                </a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="#" onclick="exportCurrentView()">
                    <i class="fas fa-filter"></i> Mevcut Görünümü Export Et
                </a></li>
            </ul>
        </div>
        
        <a asp-action="Tree" class="btn btn-info me-2">
            <i class="fas fa-sitemap"></i> Ağaç Görünümü
        </a>
        <a asp-action="Create" class="btn btn-primary">
            <i class="fas fa-plus"></i> Yeni Departman
        </a>
    </div>
</div>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["Success"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Arama ve Filtreleme Formu -->
<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">
            <button class="btn btn-link text-decoration-none" type="button" data-bs-toggle="collapse" data-bs-target="#searchForm">
                <i class="fas fa-search"></i> Arama ve Filtreleme
            </button>
        </h5>
    </div>
    <div class="collapse @(string.IsNullOrEmpty(Model.Filter.SearchTerm) && !Model.Filter.IsActive.HasValue && !Model.Filter.HasParent.HasValue ? "" : "show")" id="searchForm">
        <div class="card-body">
            <form asp-action="Index" method="get" id="departmentSearchForm">
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group mb-3">
                            <label asp-for="Filter.SearchTerm" class="form-label"></label>
                            <input asp-for="Filter.SearchTerm" class="form-control" placeholder="Departman adı veya açıklama..." id="searchInput" />
                            <small class="form-text text-muted">Departman adı veya açıklamasında arama yapar</small>
                        </div>
                    </div>
                    
                    <div class="col-md-2">
                        <div class="form-group mb-3">
                            <label asp-for="Filter.IsActive" class="form-label"></label>
                            <select asp-for="Filter.IsActive" class="form-select" id="statusFilter">
                                <option value="">Tümü</option>
                                <option value="true">Aktif</option>
                                <option value="false">Pasif</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="col-md-2">
                        <div class="form-group mb-3">
                            <label asp-for="Filter.HasParent" class="form-label">Seviye</label>
                            <select asp-for="Filter.HasParent" class="form-select">
                                <option value="">Tümü</option>
                                <option value="false">Ana Departmanlar</option>
                                <option value="true">Alt Departmanlar</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="col-md-2">
                        <div class="form-group mb-3">
                            <label asp-for="Filter.SortBy" class="form-label">Sıralama</label>
                            <select asp-for="Filter.SortBy" class="form-select">
                                <option value="Name">Ada Göre</option>
                                <option value="CreatedAt">Oluşturma Tarihine Göre</option>
                                <option value="Description">Açıklamaya Göre</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="col-md-2">
                        <div class="form-group mb-3">
                            <label class="form-label">&nbsp;</label>
                            <div class="d-grid">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-search"></i> Ara
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="row">
                    <div class="col-12">
                        <div class="form-check">
                            <input asp-for="Filter.SortDescending" class="form-check-input" />
                            <label asp-for="Filter.SortDescending" class="form-check-label">Azalan sıralama</label>
                        </div>
                    </div>
                </div>
                
                <!-- Hidden fields for pagination -->
                <input type="hidden" asp-for="Filter.Page" />
                <input type="hidden" asp-for="Filter.PageSize" />
            </form>
            
            <div class="mt-3">
                <a href="@Url.Action("Index")" class="btn btn-outline-secondary btn-sm">
                    <i class="fas fa-times"></i> Filtreleri Temizle
                </a>
            </div>
        </div>
    </div>
</div>

<!-- Sonuç Bilgisi -->
@if (Model.TotalCount > 0)
{
    <div class="alert alert-info d-flex justify-content-between align-items-center">
        <div>
            <i class="fas fa-info-circle"></i>
            Toplam <strong>@Model.TotalCount</strong> departman bulundu. 
            (@Model.StartItem - @Model.EndItem arası gösteriliyor)
            
            @if (!string.IsNullOrEmpty(Model.Filter.SearchTerm))
            {
                <br /><strong>Arama terimi:</strong> @Model.Filter.SearchTerm
            }
        </div>
        <div>
            <button type="button" class="btn btn-outline-success btn-sm" onclick="exportSearchResults()">
                <i class="fas fa-download"></i> Bu Sonuçları Export Et
            </button>
        </div>
    </div>
}

<!-- Departman Listesi -->
<div class="card">
    <div class="card-body">
        @if (Model.Departments.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>
                                <a href="javascript:void(0)" onclick="sortBy('Name')" class="text-white text-decoration-none">
                                    Departman Adı
                                    @if (Model.Filter.SortBy == "Name")
                                    {
                                        <i class="fas fa-sort-@(Model.Filter.SortDescending ? "down" : "up")"></i>
                                    }
                                </a>
                            </th>
                            <th>Açıklama</th>
                            <th>Üst Departman</th>
                            <th>Personel Sayısı</th>
                            <th>
                                <a href="javascript:void(0)" onclick="sortBy('IsActive')" class="text-white text-decoration-none">
                                    Durum
                                    @if (Model.Filter.SortBy == "IsActive")
                                    {
                                        <i class="fas fa-sort-@(Model.Filter.SortDescending ? "down" : "up")"></i>
                                    }
                                </a>
                            </th>
                            <th>İşlemler</th>
                        </tr>
                    </thead>
                    <tbody id="departmentTableBody">
                        @foreach (var item in Model.Departments)
                        {
                            <tr class="@(item.IsActive ? "" : "table-secondary")" data-department-id="@item.Id">
                                <td>
                                    @{
                                        string indent = "";
                                        for (int i = 0; i < item.Level; i++)
                                        {
                                            indent += "&nbsp;&nbsp;&nbsp;&nbsp;";
                                        }
                                    }
                                    @Html.Raw(indent)
                                    @if (item.Level > 0)
                                    {
                                        <i class="fas fa-arrow-right text-muted me-1"></i>
                                    }
                                    @if (item.HasChildren)
                                    {
                                        <i class="fas fa-folder text-warning me-1"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-folder-open text-info me-1"></i>
                                    }
                                    <span class="department-name">@Html.DisplayFor(modelItem => item.Name)</span>
                                </td>
                                <td>
                                    <span class="department-description">@Html.DisplayFor(modelItem => item.Description)</span>
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(item.ParentDepartmentName))
                                    {
                                        <span class="badge bg-secondary">@item.ParentDepartmentName</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Ana Departman</span>
                                    }
                                </td>
                                <td>
                                    <a asp-action="Employees" asp-route-id="@item.Id" class="btn btn-sm btn-outline-primary">
                                        @item.EmployeeCount <i class="fas fa-users"></i>
                                    </a>
                                </td>
                                <td>
                                    @if (item.IsActive)
                                    {
                                        <span class="badge bg-success">Aktif</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Pasif</span>
                                    }
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info btn-sm" title="Detay">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning btn-sm" title="Düzenle">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        @if (item.IsActive)
                                        {
                                            <form asp-action="ToggleStatus" method="post" style="display: inline;">
                                                <input type="hidden" name="id" value="@item.Id" />
                                                <input type="hidden" name="isActive" value="false" />
                                                <button type="submit" class="btn btn-secondary btn-sm" title="Pasif Yap" 
                                                        onclick="return confirm('Bu departmanı pasif yapmak istediğinize emin misiniz?')">
                                                    <i class="fas fa-ban"></i>
                                                </button>
                                            </form>
                                        }
                                        else
                                        {
                                            <form asp-action="ToggleStatus" method="post" style="display: inline;">
                                                <input type="hidden" name="id" value="@item.Id" />
                                                <input type="hidden" name="isActive" value="true" />
                                                <button type="submit" class="btn btn-success btn-sm" title="Aktif Yap">
                                                    <i class="fas fa-check"></i>
                                                </button>
                                            </form>
                                        }
                                        <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger btn-sm" title="Sil">
                                            <i class="fas fa-trash"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            
            <!-- Sayfalama -->
            @if (Model.TotalPages > 1)
            {
                <nav aria-label="Departman sayfalama">
                    <ul class="pagination justify-content-center mt-4">
                        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                            <a class="page-link" href="@GetPageUrl(1)">İlk</a>
                        </li>
                        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                            <a class="page-link" href="@GetPageUrl(Model.CurrentPage - 1)">Önceki</a>
                        </li>
                        
                        @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                        {
                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                <a class="page-link" href="@GetPageUrl(i)">@i</a>
                            </li>
                        }
                        
                        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                            <a class="page-link" href="@GetPageUrl(Model.CurrentPage + 1)">Sonraki</a>
                        </li>
                        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                            <a class="page-link" href="@GetPageUrl(Model.TotalPages)">Son</a>
                        </li>
                    </ul>
                </nav>
                
                <div class="text-center">
                    <small class="text-muted">
                        Sayfa @Model.CurrentPage / @Model.TotalPages (Toplam @Model.TotalCount kayıt)
                    </small>
                </div>
            }
        }
        else
        {
            <div class="text-center py-5">
                <i class="fas fa-search fa-3x text-muted mb-3"></i>
                <h4 class="text-muted">
                    @if (!string.IsNullOrEmpty(Model.Filter.SearchTerm) || Model.Filter.IsActive.HasValue)
                    {
                        <span>Arama kriterlerinize uygun departman bulunamadı</span>
                    }
                    else
                    {
                        <span>Henüz departman kaydı bulunmamaktadır</span>
                    }
                </h4>
                <p class="text-muted">
                    @if (!string.IsNullOrEmpty(Model.Filter.SearchTerm) || Model.Filter.IsActive.HasValue)
                    {
                        <span>Farklı arama terimleri deneyin veya filtreleri temizleyin.</span>
                    }
                    else
                    {
                        <span>İlk departman kaydını oluşturmak için "Yeni Departman" butonunu kullanın.</span>
                    }
                </p>
            </div>
        }
    </div>
</div>

@functions {
    private string GetPageUrl(int page)
    {
        var routeValues = new RouteValueDictionary
        {
            ["page"] = page,
            ["searchTerm"] = Model.Filter.SearchTerm,
            ["isActive"] = Model.Filter.IsActive,
            ["hasParent"] = Model.Filter.HasParent,
            ["sortBy"] = Model.Filter.SortBy,
            ["sortDescending"] = Model.Filter.SortDescending
        };
        
        return Url.Action("Index", routeValues) ?? "#";
    }
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/js/all.min.js"></script>
    <script>
        // Gerçek zamanlı arama
        let searchTimeout;
        document.getElementById('searchInput').addEventListener('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(function() {
                performSearch();
            }, 500);
        });
        
        // Durum filtresi değişikliği
        document.getElementById('statusFilter').addEventListener('change', function() {
            performSearch();
        });
        
        // Arama fonksiyonu
        function performSearch() {
            const searchTerm = document.getElementById('searchInput').value;
            const isActive = document.getElementById('statusFilter').value;
            
            // Form submit et
            document.getElementById('departmentSearchForm').submit();
        }
        
        // Sıralama fonksiyonu
        function sortBy(field) {
            const currentSort = '@Model.Filter.SortBy';
            const currentDesc = @Model.Filter.SortDescending.ToString().ToLower();
            
            let sortDescending = false;
            if (currentSort === field && !currentDesc) {
                sortDescending = true;
            }
            
            // Hidden input'ları güncelle
            document.querySelector('input[name="Filter.SortBy"]').value = field;
            document.querySelector('input[name="Filter.SortDescending"]').value = sortDescending;
            
            // Form submit et
            document.getElementById('departmentSearchForm').submit();
        }
        
        // Arama terimini highlight et
        function highlightSearchTerm() {
            const searchTerm = '@Model.Filter.SearchTerm';
            if (searchTerm && searchTerm.length > 0) {
                const departmentNames = document.querySelectorAll('.department-name');
                const departmentDescriptions = document.querySelectorAll('.department-description');
                
                departmentNames.forEach(function(element) {
                    highlightText(element, searchTerm);
                });
                
                departmentDescriptions.forEach(function(element) {
                    highlightText(element, searchTerm);
                });
            }
        }
        
        function highlightText(element, searchTerm) {
            const text = element.textContent;
            const highlightedText = text.replace(new RegExp(searchTerm, 'gi'), '<mark>$&</mark>');
            if (highlightedText !== text) {
                element.innerHTML = highlightedText;
            }
        }
        
        // Sayfa yüklendiğinde highlight yap
        document.addEventListener('DOMContentLoaded', function() {
            highlightSearchTerm();
        });
        
        // Export fonksiyonları
        function exportCurrentView() {
            const searchTerm = '@Model.Filter.SearchTerm';
            const isActive = '@Model.Filter.IsActive';
            const hasParent = '@Model.Filter.HasParent';
            const sortBy = '@Model.Filter.SortBy';
            const sortDescending = @Model.Filter.SortDescending.ToString().ToLower();
            
            const url = '@Url.Action("ExportCurrentView")' + 
                       '?searchTerm=' + encodeURIComponent(searchTerm) +
                       '&isActive=' + encodeURIComponent(isActive) +
                       '&hasParent=' + encodeURIComponent(hasParent) +
                       '&sortBy=' + encodeURIComponent(sortBy) +
                       '&sortDescending=' + sortDescending;
            
            window.open(url, '_blank');
        }
        
        function exportSearchResults() {
            // Form oluştur ve submit et
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '@Url.Action("ExportSearchResults")';
            
            // Filter değerlerini hidden input olarak ekle
            const filterData = {
                'SearchTerm': '@Model.Filter.SearchTerm',
                'IsActive': '@Model.Filter.IsActive',
                'HasParent': '@Model.Filter.HasParent',
                'SortBy': '@Model.Filter.SortBy',
                'SortDescending': @Model.Filter.SortDescending.ToString().ToLower(),
                'Page': @Model.Filter.Page,
                'PageSize': @Model.Filter.PageSize
            };
            
            for (const [key, value] in Object.entries(filterData)) {
                if (value && value !== 'null' && value !== '') {
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = 'Filter.' + key;
                    input.value = value;
                    form.appendChild(input);
                }
            }
            
            // Anti-forgery token ekle
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            if (token) {
                const tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = token.value;
                form.appendChild(tokenInput);
            }
            
            document.body.appendChild(form);
            form.submit();
            document.body.removeChild(form);
        }
    </script>
}
