// <auto-generated />
using System;
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250920135711_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.ApplicationDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<int>("DownloadCount")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<int>("JobApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastDownloadedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastDownloadedById")
                        .HasColumnType("int");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UploadedById")
                        .HasColumnType("int");

                    b.Property<string>("VerificationNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VerifiedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentType")
                        .HasDatabaseName("IX_ApplicationDocuments_DocumentType");

                    b.HasIndex("FileName")
                        .HasDatabaseName("IX_ApplicationDocuments_FileName");

                    b.HasIndex("JobApplicationId")
                        .HasDatabaseName("IX_ApplicationDocuments_JobApplicationId");

                    b.HasIndex("LastDownloadedById");

                    b.HasIndex("UploadedById");

                    b.HasIndex("VerifiedById");

                    b.ToTable("ApplicationDocuments", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastLoginIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentDepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentDepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 580, DateTimeKind.Local).AddTicks(4575),
                            Description = "İnsan kaynakları departmanı",
                            IsActive = true,
                            Name = "İnsan Kaynakları"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 580, DateTimeKind.Local).AddTicks(4720),
                            Description = "Bilgi işlem departmanı",
                            IsActive = true,
                            Name = "Bilgi İşlem"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 580, DateTimeKind.Local).AddTicks(4722),
                            Description = "Muhasebe departmanı",
                            IsActive = true,
                            Name = "Muhasebe"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("GPA")
                        .HasColumnType("decimal(3,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOngoing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonId", "StartDate");

                    b.ToTable("Educations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(7707),
                            Degree = "Lisans",
                            EndDate = new DateTime(2022, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FieldOfStudy = "İnsan Kaynakları Yönetimi",
                            GPA = 3.45m,
                            IsActive = true,
                            IsOngoing = false,
                            Location = "İstanbul",
                            PersonId = 1,
                            SchoolName = "İstanbul Üniversitesi",
                            StartDate = new DateTime(2018, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(7715),
                            Degree = "Yüksek Lisans",
                            FieldOfStudy = "İşletme",
                            IsActive = true,
                            IsOngoing = true,
                            Location = "Eskişehir",
                            PersonId = 1,
                            SchoolName = "Anadolu Üniversitesi",
                            StartDate = new DateTime(2022, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DAL.Entities.JobApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Adres bilgisi");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Başvuru tarihi");

                    b.Property<DateTime?>("AvailableStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CoverLetter")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("Ön yazı");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentCompany")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Mevcut şirket");

                    b.Property<string>("CurrentPosition")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Mevcut pozisyon");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Bölüm");

                    b.Property<string>("EducationLevel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Eğitim seviyesi");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("E-posta adresi");

                    b.Property<decimal?>("ExpectedSalary")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Beklenen maaş");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Başvuru sahibinin adı");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("GraduationYear")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InterviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InterviewNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Mülakat notları");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailableImmediately")
                        .HasColumnType("bit");

                    b.Property<int?>("JobPostingId")
                        .HasColumnType("int");

                    b.Property<string>("Languages")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Diller");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Başvuru sahibinin soyadı");

                    b.Property<string>("NationalId")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasComment("TC Kimlik numarası");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Telefon numarası");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("İnceleme notları");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReviewedById")
                        .HasColumnType("int");

                    b.Property<string>("Skills")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Yetenekler");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Başvuru durumu");

                    b.Property<string>("University")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Üniversite");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationDate")
                        .HasDatabaseName("IX_JobApplications_ApplicationDate");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_JobApplications_Email");

                    b.HasIndex("JobPostingId");

                    b.HasIndex("PositionId")
                        .HasDatabaseName("IX_JobApplications_PositionId");

                    b.HasIndex("ReviewedById");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_JobApplications_Status");

                    b.HasIndex("FirstName", "LastName")
                        .HasDatabaseName("IX_JobApplications_FullName");

                    b.ToTable("JobApplications", null, t =>
                        {
                            t.HasComment("İş başvuruları tablosu");

                            t.HasCheckConstraint("CK_JobApplications_Age", "[Age] >= 18 AND [Age] <= 70");

                            t.HasCheckConstraint("CK_JobApplications_ExpectedSalary", "[ExpectedSalary] >= 0");

                            t.HasCheckConstraint("CK_JobApplications_ExperienceYears", "[ExperienceYears] >= 0 AND [ExperienceYears] <= 50");

                            t.HasCheckConstraint("CK_JobApplications_GraduationYear", "[GraduationYear] >= 1950 AND [GraduationYear] <= 2030");

                            t.HasCheckConstraint("CK_JobApplications_Rating", "[Rating] >= 1 AND [Rating] <= 10");
                        });
                });

            modelBuilder.Entity("DAL.Entities.JobDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<string>("CareerPath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DetailedDescription")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Languages")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MainResponsibilities")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("MinEducationLevel")
                        .HasColumnType("int");

                    b.Property<int>("MinRequiredExperience")
                        .HasColumnType("int");

                    b.Property<string>("PerformanceMetrics")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PhysicalRequirements")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("PreferredCertifications")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("PreferredEducationLevel")
                        .HasColumnType("int");

                    b.Property<int?>("PreferredExperience")
                        .HasColumnType("int");

                    b.Property<string>("PreferredSkills")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("PreviousVersionId")
                        .HasColumnType("int");

                    b.Property<bool>("RemoteWorkAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("RequiredCertifications")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("RequiredSkills")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("SecondaryResponsibilities")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("SoftSkills")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TechnicalSkills")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("TravelRequirement")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WorkingConditions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("IsApproved");

                    b.HasIndex("PositionId");

                    b.HasIndex("PreviousVersionId");

                    b.HasIndex("PositionId", "Version");

                    b.ToTable("JobDefinitions", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.JobDefinitionQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Importance")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("JobDefinitionId")
                        .HasColumnType("int");

                    b.Property<int?>("MinExperience")
                        .HasColumnType("int");

                    b.Property<int?>("MinScore")
                        .HasColumnType("int");

                    b.Property<string>("QualificationName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobDefinitionId");

                    b.HasIndex("JobDefinitionId", "Category");

                    b.ToTable("JobDefinitionQualifications", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.JobPosting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationCount")
                        .HasColumnType("int");

                    b.Property<string>("Benefits")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Yan haklar");

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("İletişim bilgileri");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("İş tanımı");

                    b.Property<int>("EmploymentType")
                        .HasColumnType("int")
                        .HasComment("Çalışma türü");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoteWork")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Çalışma yeri");

                    b.Property<int?>("MaxExperience")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaxSalary")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Maksimum maaş");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Meta açıklama");

                    b.Property<string>("MinEducation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Minimum eğitim seviyesi");

                    b.Property<int?>("MinExperience")
                        .HasColumnType("int");

                    b.Property<decimal?>("MinSalary")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Minimum maaş");

                    b.Property<int?>("OpenPositions")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2")
                        .HasComment("Yayınlanma tarihi");

                    b.Property<string>("Requirements")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Gereksinimler");

                    b.Property<string>("Responsibilities")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Sorumluluklar");

                    b.Property<string>("Slug")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("SEO dostu URL");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("İlan durumu");

                    b.Property<string>("Tags")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Etiketler");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("İş ilanı başlığı");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("IX_JobPostings_DepartmentId");

                    b.HasIndex("ExpiryDate")
                        .HasDatabaseName("IX_JobPostings_ExpiryDate");

                    b.HasIndex("PositionId")
                        .HasDatabaseName("IX_JobPostings_PositionId");

                    b.HasIndex("PublishDate")
                        .HasDatabaseName("IX_JobPostings_PublishDate");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("IX_JobPostings_Slug")
                        .HasFilter("[Slug] IS NOT NULL");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_JobPostings_Status");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_JobPostings_Title");

                    b.HasIndex("UpdatedById");

                    b.ToTable("JobPostings", null, t =>
                        {
                            t.HasComment("İş ilanları tablosu");

                            t.HasCheckConstraint("CK_JobPostings_ApplicationCount", "[ApplicationCount] >= 0");

                            t.HasCheckConstraint("CK_JobPostings_MaxExperience", "[MaxExperience] >= 0 AND [MaxExperience] <= 50");

                            t.HasCheckConstraint("CK_JobPostings_MaxSalary", "[MaxSalary] >= 0");

                            t.HasCheckConstraint("CK_JobPostings_MinExperience", "[MinExperience] >= 0 AND [MinExperience] <= 50");

                            t.HasCheckConstraint("CK_JobPostings_MinSalary", "[MinSalary] >= 0");

                            t.HasCheckConstraint("CK_JobPostings_OpenPositions", "[OpenPositions] >= 1 AND [OpenPositions] <= 100");

                            t.HasCheckConstraint("CK_JobPostings_ViewCount", "[ViewCount] >= 0");
                        });
                });

            modelBuilder.Entity("DAL.Entities.JobRequiredSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssessmentCriteria")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Importance")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("JobDefinitionId")
                        .HasColumnType("int");

                    b.Property<int?>("JobDefinitionId1")
                        .HasColumnType("int");

                    b.Property<int?>("MinExperienceYears")
                        .HasColumnType("int");

                    b.Property<int>("MinLevel")
                        .HasColumnType("int");

                    b.Property<int?>("PreferredExperienceYears")
                        .HasColumnType("int");

                    b.Property<int?>("PreferredLevel")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresCertification")
                        .HasColumnType("bit");

                    b.Property<int>("SkillTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("SpecificRequirements")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Importance");

                    b.HasIndex("JobDefinitionId");

                    b.HasIndex("JobDefinitionId1");

                    b.HasIndex("SkillTemplateId");

                    b.HasIndex("JobDefinitionId", "SkillTemplateId")
                        .IsUnique();

                    b.ToTable("JobRequiredSkills", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Leave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApprovalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EmergencyContact")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmergencyPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HandoverNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("HandoverToPersonId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalDays")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("HandoverToPersonId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("PersonId");

                    b.HasIndex("RequestDate");

                    b.HasIndex("Status");

                    b.HasIndex("StartDate", "EndDate");

                    b.ToTable("Leaves", t =>
                        {
                            t.HasCheckConstraint("CK_Leave_DateRange", "EndDate >= StartDate");

                            t.HasCheckConstraint("CK_Leave_TotalDays", "TotalDays > 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApprovalNotes = "Onaylandı",
                            ApprovedAt = new DateTime(2025, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApprovedById = 3,
                            CreatedAt = new DateTime(2025, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2025, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsUrgent = false,
                            LeaveTypeId = 1,
                            PersonId = 1,
                            Reason = "Aile ziyareti",
                            RequestDate = new DateTime(2025, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TotalDays = 5
                        },
                        new
                        {
                            Id = 2,
                            ApprovalNotes = "Sağlık raporu onaylandı",
                            ApprovedAt = new DateTime(2025, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApprovedById = 1,
                            CreatedAt = new DateTime(2025, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentPath = "/documents/medical_report_2.pdf",
                            EndDate = new DateTime(2025, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsUrgent = true,
                            LeaveTypeId = 2,
                            PersonId = 2,
                            Reason = "Grip nedeniyle hastalık",
                            RequestDate = new DateTime(2025, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TotalDays = 3
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HandoverNotes = "Projeler tamamlandı, acil durumlar için telefon açık",
                            HandoverToPersonId = 7,
                            IsActive = true,
                            IsUrgent = false,
                            LeaveTypeId = 1,
                            PersonId = 5,
                            Reason = "Yılbaşı tatili",
                            RequestDate = new DateTime(2025, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TotalDays = 10
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2025, 12, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsUrgent = false,
                            LeaveTypeId = 1,
                            PersonId = 8,
                            Reason = "Kişisel işler",
                            RequestDate = new DateTime(2025, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TotalDays = 3
                        },
                        new
                        {
                            Id = 5,
                            ApprovalNotes = "İyi tatiller",
                            ApprovedAt = new DateTime(2025, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApprovedById = 13,
                            CreatedAt = new DateTime(2025, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmergencyContact = "Eşi: Ayşe Turan",
                            EmergencyPhone = "0555 987 65 43",
                            EndDate = new DateTime(2025, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsUrgent = false,
                            LeaveTypeId = 1,
                            PersonId = 12,
                            Reason = "Doktor kontrolü ve dinlenme",
                            RequestDate = new DateTime(2025, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 4,
                            TotalDays = 3
                        },
                        new
                        {
                            Id = 6,
                            ApprovalNotes = "Tebrikler! Mutluluklar dileriz.",
                            ApprovedAt = new DateTime(2025, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApprovedById = 13,
                            CreatedAt = new DateTime(2025, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentPath = "/documents/marriage_certificate_15.pdf",
                            EndDate = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsUrgent = false,
                            LeaveTypeId = 4,
                            PersonId = 15,
                            Reason = "Evlilik",
                            RequestDate = new DateTime(2025, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 5,
                            TotalDays = 3
                        },
                        new
                        {
                            Id = 7,
                            ApprovedAt = new DateTime(2025, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApprovedById = 1,
                            CreatedAt = new DateTime(2025, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2025, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsUrgent = false,
                            LeaveTypeId = 1,
                            PersonId = 19,
                            Reason = "Tatil planı",
                            RejectionReason = "Yılsonu yoğunluğu nedeniyle bu tarihlerde izin verilemez. Ocak ayında tekrar başvurun.",
                            RequestDate = new DateTime(2025, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TotalDays = 6
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2025, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsUrgent = false,
                            LeaveTypeId = 1,
                            PersonId = 2,
                            Reason = "Aile ziyareti",
                            RequestDate = new DateTime(2025, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TotalDays = 3
                        },
                        new
                        {
                            Id = 9,
                            ApprovalNotes = "Sağlık raporu onaylandı",
                            ApprovedAt = new DateTime(2025, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApprovedById = 1,
                            CreatedAt = new DateTime(2025, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentPath = "/documents/medical_4.pdf",
                            EndDate = new DateTime(2025, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsUrgent = true,
                            LeaveTypeId = 2,
                            PersonId = 4,
                            Reason = "Doktor kontrolü",
                            RequestDate = new DateTime(2025, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TotalDays = 3
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2025, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HandoverNotes = "Tüm işler tamamlandı",
                            IsActive = true,
                            IsUrgent = false,
                            LeaveTypeId = 1,
                            PersonId = 7,
                            Reason = "Yılbaşı öncesi tatil",
                            RequestDate = new DateTime(2025, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TotalDays = 5
                        },
                        new
                        {
                            Id = 11,
                            ApprovalNotes = "Onaylandı",
                            ApprovedAt = new DateTime(2025, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApprovedById = 1,
                            CreatedAt = new DateTime(2025, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2025, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsUrgent = false,
                            LeaveTypeId = 1,
                            PersonId = 10,
                            Reason = "Kişisel işler",
                            RequestDate = new DateTime(2025, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 5,
                            TotalDays = 3
                        });
                });

            modelBuilder.Entity("DAL.Entities.LeaveBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AccruedToDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("AdjustmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdjustmentReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("AllocatedDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("AvailableDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("CarriedOverDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastAccrualDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("ManualAdjustment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("MonthlyAccrual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("PendingDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<decimal>("RemainingDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("UsedDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("Year")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2025);

                    b.HasKey("Id");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("PersonId");

                    b.HasIndex("Year");

                    b.HasIndex("PersonId", "LeaveTypeId", "Year")
                        .IsUnique();

                    b.ToTable("LeaveBalances", t =>
                        {
                            t.HasCheckConstraint("CK_LeaveBalance_AllocatedDays", "AllocatedDays >= 0");

                            t.HasCheckConstraint("CK_LeaveBalance_CarriedOverDays", "CarriedOverDays >= 0");

                            t.HasCheckConstraint("CK_LeaveBalance_PendingDays", "PendingDays >= 0");

                            t.HasCheckConstraint("CK_LeaveBalance_UsedDays", "UsedDays >= 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccruedToDate = 21.0m,
                            AllocatedDays = 21.0m,
                            AvailableDays = 21.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6113),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6003),
                            LeaveTypeId = 1,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 1.75m,
                            PendingDays = 0.0m,
                            PersonId = 1,
                            RemainingDays = 21.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 2,
                            AccruedToDate = 0.0m,
                            AllocatedDays = 0.0m,
                            AvailableDays = 0.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6133),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6132),
                            LeaveTypeId = 2,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 1,
                            RemainingDays = 0.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 3,
                            AccruedToDate = 3.0m,
                            AllocatedDays = 3.0m,
                            AvailableDays = 3.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6140),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6139),
                            LeaveTypeId = 4,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 1,
                            RemainingDays = 3.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 4,
                            AccruedToDate = 7.0m,
                            AllocatedDays = 7.0m,
                            AvailableDays = 7.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6147),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6146),
                            LeaveTypeId = 6,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 1,
                            RemainingDays = 7.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 5,
                            AccruedToDate = 21.0m,
                            AllocatedDays = 21.0m,
                            AvailableDays = 21.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6261),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6259),
                            LeaveTypeId = 1,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 1.75m,
                            PendingDays = 0.0m,
                            PersonId = 2,
                            RemainingDays = 21.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 6,
                            AccruedToDate = 0.0m,
                            AllocatedDays = 0.0m,
                            AvailableDays = 0.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6273),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6273),
                            LeaveTypeId = 2,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 2,
                            RemainingDays = 0.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 7,
                            AccruedToDate = 3.0m,
                            AllocatedDays = 3.0m,
                            AvailableDays = 3.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6279),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6278),
                            LeaveTypeId = 4,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 2,
                            RemainingDays = 3.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 8,
                            AccruedToDate = 7.0m,
                            AllocatedDays = 7.0m,
                            AvailableDays = 7.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6285),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6284),
                            LeaveTypeId = 6,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 2,
                            RemainingDays = 7.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 9,
                            AccruedToDate = 21.0m,
                            AllocatedDays = 21.0m,
                            AvailableDays = 21.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6289),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6289),
                            LeaveTypeId = 1,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 1.75m,
                            PendingDays = 0.0m,
                            PersonId = 3,
                            RemainingDays = 21.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 10,
                            AccruedToDate = 0.0m,
                            AllocatedDays = 0.0m,
                            AvailableDays = 0.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6293),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6293),
                            LeaveTypeId = 2,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 3,
                            RemainingDays = 0.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 11,
                            AccruedToDate = 3.0m,
                            AllocatedDays = 3.0m,
                            AvailableDays = 3.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6296),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6296),
                            LeaveTypeId = 4,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 3,
                            RemainingDays = 3.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 12,
                            AccruedToDate = 7.0m,
                            AllocatedDays = 7.0m,
                            AvailableDays = 7.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6300),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6299),
                            LeaveTypeId = 6,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 3,
                            RemainingDays = 7.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 13,
                            AccruedToDate = 21.0m,
                            AllocatedDays = 21.0m,
                            AvailableDays = 21.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6303),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6302),
                            LeaveTypeId = 1,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 1.75m,
                            PendingDays = 0.0m,
                            PersonId = 4,
                            RemainingDays = 21.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 14,
                            AccruedToDate = 0.0m,
                            AllocatedDays = 0.0m,
                            AvailableDays = 0.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6306),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6306),
                            LeaveTypeId = 2,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 4,
                            RemainingDays = 0.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 15,
                            AccruedToDate = 3.0m,
                            AllocatedDays = 3.0m,
                            AvailableDays = 3.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6310),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6310),
                            LeaveTypeId = 4,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 4,
                            RemainingDays = 3.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 16,
                            AccruedToDate = 7.0m,
                            AllocatedDays = 7.0m,
                            AvailableDays = 7.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6313),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6313),
                            LeaveTypeId = 6,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 4,
                            RemainingDays = 7.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 17,
                            AccruedToDate = 21.0m,
                            AllocatedDays = 21.0m,
                            AvailableDays = 21.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6317),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6316),
                            LeaveTypeId = 1,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 1.75m,
                            PendingDays = 0.0m,
                            PersonId = 5,
                            RemainingDays = 21.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 18,
                            AccruedToDate = 0.0m,
                            AllocatedDays = 0.0m,
                            AvailableDays = 0.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6321),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6321),
                            LeaveTypeId = 2,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 5,
                            RemainingDays = 0.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 19,
                            AccruedToDate = 3.0m,
                            AllocatedDays = 3.0m,
                            AvailableDays = 3.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6365),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6364),
                            LeaveTypeId = 4,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 5,
                            RemainingDays = 3.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 20,
                            AccruedToDate = 7.0m,
                            AllocatedDays = 7.0m,
                            AvailableDays = 7.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6368),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6367),
                            LeaveTypeId = 6,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 5,
                            RemainingDays = 7.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 21,
                            AccruedToDate = 21.0m,
                            AllocatedDays = 21.0m,
                            AvailableDays = 21.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6371),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6371),
                            LeaveTypeId = 1,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 1.75m,
                            PendingDays = 0.0m,
                            PersonId = 6,
                            RemainingDays = 21.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 22,
                            AccruedToDate = 0.0m,
                            AllocatedDays = 0.0m,
                            AvailableDays = 0.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6374),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6374),
                            LeaveTypeId = 2,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 6,
                            RemainingDays = 0.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 23,
                            AccruedToDate = 3.0m,
                            AllocatedDays = 3.0m,
                            AvailableDays = 3.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6378),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6378),
                            LeaveTypeId = 4,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 6,
                            RemainingDays = 3.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 24,
                            AccruedToDate = 7.0m,
                            AllocatedDays = 7.0m,
                            AvailableDays = 7.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6382),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6381),
                            LeaveTypeId = 6,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 6,
                            RemainingDays = 7.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 25,
                            AccruedToDate = 21.0m,
                            AllocatedDays = 21.0m,
                            AvailableDays = 21.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6385),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6385),
                            LeaveTypeId = 1,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 1.75m,
                            PendingDays = 0.0m,
                            PersonId = 7,
                            RemainingDays = 21.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 26,
                            AccruedToDate = 0.0m,
                            AllocatedDays = 0.0m,
                            AvailableDays = 0.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6389),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6388),
                            LeaveTypeId = 2,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 7,
                            RemainingDays = 0.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 27,
                            AccruedToDate = 3.0m,
                            AllocatedDays = 3.0m,
                            AvailableDays = 3.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6392),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6391),
                            LeaveTypeId = 4,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 7,
                            RemainingDays = 3.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 28,
                            AccruedToDate = 7.0m,
                            AllocatedDays = 7.0m,
                            AvailableDays = 7.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6395),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6394),
                            LeaveTypeId = 6,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 7,
                            RemainingDays = 7.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 29,
                            AccruedToDate = 21.0m,
                            AllocatedDays = 21.0m,
                            AvailableDays = 21.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6398),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6398),
                            LeaveTypeId = 1,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 1.75m,
                            PendingDays = 0.0m,
                            PersonId = 8,
                            RemainingDays = 21.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 30,
                            AccruedToDate = 0.0m,
                            AllocatedDays = 0.0m,
                            AvailableDays = 0.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6401),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6401),
                            LeaveTypeId = 2,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 8,
                            RemainingDays = 0.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 31,
                            AccruedToDate = 3.0m,
                            AllocatedDays = 3.0m,
                            AvailableDays = 3.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6404),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6404),
                            LeaveTypeId = 4,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 8,
                            RemainingDays = 3.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 32,
                            AccruedToDate = 7.0m,
                            AllocatedDays = 7.0m,
                            AvailableDays = 7.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6408),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6407),
                            LeaveTypeId = 6,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 8,
                            RemainingDays = 7.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 33,
                            AccruedToDate = 21.0m,
                            AllocatedDays = 21.0m,
                            AvailableDays = 21.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6411),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6410),
                            LeaveTypeId = 1,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 1.75m,
                            PendingDays = 0.0m,
                            PersonId = 9,
                            RemainingDays = 21.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 34,
                            AccruedToDate = 0.0m,
                            AllocatedDays = 0.0m,
                            AvailableDays = 0.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6415),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6415),
                            LeaveTypeId = 2,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 9,
                            RemainingDays = 0.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 35,
                            AccruedToDate = 3.0m,
                            AllocatedDays = 3.0m,
                            AvailableDays = 3.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6418),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6418),
                            LeaveTypeId = 4,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 9,
                            RemainingDays = 3.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 36,
                            AccruedToDate = 7.0m,
                            AllocatedDays = 7.0m,
                            AvailableDays = 7.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6421),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6421),
                            LeaveTypeId = 6,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 9,
                            RemainingDays = 7.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 37,
                            AccruedToDate = 21.0m,
                            AllocatedDays = 21.0m,
                            AvailableDays = 21.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6424),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6424),
                            LeaveTypeId = 1,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 1.75m,
                            PendingDays = 0.0m,
                            PersonId = 10,
                            RemainingDays = 21.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 38,
                            AccruedToDate = 0.0m,
                            AllocatedDays = 0.0m,
                            AvailableDays = 0.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6427),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6427),
                            LeaveTypeId = 2,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 10,
                            RemainingDays = 0.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 39,
                            AccruedToDate = 3.0m,
                            AllocatedDays = 3.0m,
                            AvailableDays = 3.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6431),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6430),
                            LeaveTypeId = 4,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 10,
                            RemainingDays = 3.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 40,
                            AccruedToDate = 7.0m,
                            AllocatedDays = 7.0m,
                            AvailableDays = 7.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6434),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6433),
                            LeaveTypeId = 6,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 10,
                            RemainingDays = 7.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 41,
                            AccruedToDate = 21.0m,
                            AllocatedDays = 21.0m,
                            AvailableDays = 21.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6437),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6436),
                            LeaveTypeId = 1,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 1.75m,
                            PendingDays = 0.0m,
                            PersonId = 11,
                            RemainingDays = 21.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 42,
                            AccruedToDate = 0.0m,
                            AllocatedDays = 0.0m,
                            AvailableDays = 0.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6440),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6439),
                            LeaveTypeId = 2,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 11,
                            RemainingDays = 0.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 43,
                            AccruedToDate = 3.0m,
                            AllocatedDays = 3.0m,
                            AvailableDays = 3.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6443),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6443),
                            LeaveTypeId = 4,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 11,
                            RemainingDays = 3.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 44,
                            AccruedToDate = 7.0m,
                            AllocatedDays = 7.0m,
                            AvailableDays = 7.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6446),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6446),
                            LeaveTypeId = 6,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 11,
                            RemainingDays = 7.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 45,
                            AccruedToDate = 21.0m,
                            AllocatedDays = 21.0m,
                            AvailableDays = 21.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6449),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6449),
                            LeaveTypeId = 1,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 1.75m,
                            PendingDays = 0.0m,
                            PersonId = 12,
                            RemainingDays = 21.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 46,
                            AccruedToDate = 0.0m,
                            AllocatedDays = 0.0m,
                            AvailableDays = 0.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6452),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6452),
                            LeaveTypeId = 2,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 12,
                            RemainingDays = 0.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 47,
                            AccruedToDate = 3.0m,
                            AllocatedDays = 3.0m,
                            AvailableDays = 3.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6456),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6455),
                            LeaveTypeId = 4,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 12,
                            RemainingDays = 3.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 48,
                            AccruedToDate = 7.0m,
                            AllocatedDays = 7.0m,
                            AvailableDays = 7.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6459),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6458),
                            LeaveTypeId = 6,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 12,
                            RemainingDays = 7.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 49,
                            AccruedToDate = 21.0m,
                            AllocatedDays = 21.0m,
                            AvailableDays = 21.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6484),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6483),
                            LeaveTypeId = 1,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 1.75m,
                            PendingDays = 0.0m,
                            PersonId = 13,
                            RemainingDays = 21.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 50,
                            AccruedToDate = 0.0m,
                            AllocatedDays = 0.0m,
                            AvailableDays = 0.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6487),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6486),
                            LeaveTypeId = 2,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 13,
                            RemainingDays = 0.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 51,
                            AccruedToDate = 3.0m,
                            AllocatedDays = 3.0m,
                            AvailableDays = 3.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6490),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6490),
                            LeaveTypeId = 4,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 13,
                            RemainingDays = 3.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 52,
                            AccruedToDate = 7.0m,
                            AllocatedDays = 7.0m,
                            AvailableDays = 7.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6493),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6493),
                            LeaveTypeId = 6,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 13,
                            RemainingDays = 7.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 53,
                            AccruedToDate = 21.0m,
                            AllocatedDays = 21.0m,
                            AvailableDays = 21.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6497),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6496),
                            LeaveTypeId = 1,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 1.75m,
                            PendingDays = 0.0m,
                            PersonId = 14,
                            RemainingDays = 21.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 54,
                            AccruedToDate = 0.0m,
                            AllocatedDays = 0.0m,
                            AvailableDays = 0.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6500),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6500),
                            LeaveTypeId = 2,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 14,
                            RemainingDays = 0.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 55,
                            AccruedToDate = 3.0m,
                            AllocatedDays = 3.0m,
                            AvailableDays = 3.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6503),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6503),
                            LeaveTypeId = 4,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 14,
                            RemainingDays = 3.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 56,
                            AccruedToDate = 7.0m,
                            AllocatedDays = 7.0m,
                            AvailableDays = 7.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6507),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6507),
                            LeaveTypeId = 6,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 14,
                            RemainingDays = 7.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 57,
                            AccruedToDate = 21.0m,
                            AllocatedDays = 21.0m,
                            AvailableDays = 21.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6510),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6510),
                            LeaveTypeId = 1,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 1.75m,
                            PendingDays = 0.0m,
                            PersonId = 15,
                            RemainingDays = 21.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 58,
                            AccruedToDate = 0.0m,
                            AllocatedDays = 0.0m,
                            AvailableDays = 0.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6514),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6513),
                            LeaveTypeId = 2,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 15,
                            RemainingDays = 0.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 59,
                            AccruedToDate = 3.0m,
                            AllocatedDays = 3.0m,
                            AvailableDays = 3.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6517),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6516),
                            LeaveTypeId = 4,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 15,
                            RemainingDays = 3.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 60,
                            AccruedToDate = 7.0m,
                            AllocatedDays = 7.0m,
                            AvailableDays = 7.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6520),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6520),
                            LeaveTypeId = 6,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 15,
                            RemainingDays = 7.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 61,
                            AccruedToDate = 21.0m,
                            AllocatedDays = 21.0m,
                            AvailableDays = 21.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6524),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6523),
                            LeaveTypeId = 1,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 1.75m,
                            PendingDays = 0.0m,
                            PersonId = 16,
                            RemainingDays = 21.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 62,
                            AccruedToDate = 0.0m,
                            AllocatedDays = 0.0m,
                            AvailableDays = 0.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6527),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6527),
                            LeaveTypeId = 2,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 16,
                            RemainingDays = 0.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 63,
                            AccruedToDate = 3.0m,
                            AllocatedDays = 3.0m,
                            AvailableDays = 3.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6531),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6530),
                            LeaveTypeId = 4,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 16,
                            RemainingDays = 3.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 64,
                            AccruedToDate = 7.0m,
                            AllocatedDays = 7.0m,
                            AvailableDays = 7.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6534),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6533),
                            LeaveTypeId = 6,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 16,
                            RemainingDays = 7.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 65,
                            AccruedToDate = 21.0m,
                            AllocatedDays = 21.0m,
                            AvailableDays = 21.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6537),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6537),
                            LeaveTypeId = 1,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 1.75m,
                            PendingDays = 0.0m,
                            PersonId = 17,
                            RemainingDays = 21.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 66,
                            AccruedToDate = 0.0m,
                            AllocatedDays = 0.0m,
                            AvailableDays = 0.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6543),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6542),
                            LeaveTypeId = 2,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 17,
                            RemainingDays = 0.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 67,
                            AccruedToDate = 3.0m,
                            AllocatedDays = 3.0m,
                            AvailableDays = 3.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6546),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6546),
                            LeaveTypeId = 4,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 17,
                            RemainingDays = 3.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 68,
                            AccruedToDate = 7.0m,
                            AllocatedDays = 7.0m,
                            AvailableDays = 7.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6549),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6549),
                            LeaveTypeId = 6,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 17,
                            RemainingDays = 7.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 69,
                            AccruedToDate = 21.0m,
                            AllocatedDays = 21.0m,
                            AvailableDays = 21.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6553),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6552),
                            LeaveTypeId = 1,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 1.75m,
                            PendingDays = 0.0m,
                            PersonId = 18,
                            RemainingDays = 21.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 70,
                            AccruedToDate = 0.0m,
                            AllocatedDays = 0.0m,
                            AvailableDays = 0.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6556),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6556),
                            LeaveTypeId = 2,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 18,
                            RemainingDays = 0.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 71,
                            AccruedToDate = 3.0m,
                            AllocatedDays = 3.0m,
                            AvailableDays = 3.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6559),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6559),
                            LeaveTypeId = 4,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 18,
                            RemainingDays = 3.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 72,
                            AccruedToDate = 7.0m,
                            AllocatedDays = 7.0m,
                            AvailableDays = 7.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6563),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6562),
                            LeaveTypeId = 6,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 18,
                            RemainingDays = 7.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 73,
                            AccruedToDate = 21.0m,
                            AllocatedDays = 21.0m,
                            AvailableDays = 21.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6566),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6566),
                            LeaveTypeId = 1,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 1.75m,
                            PendingDays = 0.0m,
                            PersonId = 19,
                            RemainingDays = 21.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 74,
                            AccruedToDate = 0.0m,
                            AllocatedDays = 0.0m,
                            AvailableDays = 0.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6570),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6569),
                            LeaveTypeId = 2,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 19,
                            RemainingDays = 0.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 75,
                            AccruedToDate = 3.0m,
                            AllocatedDays = 3.0m,
                            AvailableDays = 3.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6573),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6573),
                            LeaveTypeId = 4,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 19,
                            RemainingDays = 3.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 76,
                            AccruedToDate = 7.0m,
                            AllocatedDays = 7.0m,
                            AvailableDays = 7.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6631),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6630),
                            LeaveTypeId = 6,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 19,
                            RemainingDays = 7.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 77,
                            AccruedToDate = 21.0m,
                            AllocatedDays = 21.0m,
                            AvailableDays = 21.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6634),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6634),
                            LeaveTypeId = 1,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 1.75m,
                            PendingDays = 0.0m,
                            PersonId = 20,
                            RemainingDays = 21.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 78,
                            AccruedToDate = 0.0m,
                            AllocatedDays = 0.0m,
                            AvailableDays = 0.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6638),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6637),
                            LeaveTypeId = 2,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 20,
                            RemainingDays = 0.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 79,
                            AccruedToDate = 3.0m,
                            AllocatedDays = 3.0m,
                            AvailableDays = 3.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6641),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6641),
                            LeaveTypeId = 4,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 20,
                            RemainingDays = 3.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 80,
                            AccruedToDate = 7.0m,
                            AllocatedDays = 7.0m,
                            AvailableDays = 7.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6645),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6644),
                            LeaveTypeId = 6,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 20,
                            RemainingDays = 7.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 81,
                            AccruedToDate = 21.0m,
                            AllocatedDays = 21.0m,
                            AvailableDays = 21.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6648),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6647),
                            LeaveTypeId = 1,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 1.75m,
                            PendingDays = 0.0m,
                            PersonId = 21,
                            RemainingDays = 21.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 82,
                            AccruedToDate = 0.0m,
                            AllocatedDays = 0.0m,
                            AvailableDays = 0.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6651),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6651),
                            LeaveTypeId = 2,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 21,
                            RemainingDays = 0.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 83,
                            AccruedToDate = 3.0m,
                            AllocatedDays = 3.0m,
                            AvailableDays = 3.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6654),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6654),
                            LeaveTypeId = 4,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 21,
                            RemainingDays = 3.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        },
                        new
                        {
                            Id = 84,
                            AccruedToDate = 7.0m,
                            AllocatedDays = 7.0m,
                            AvailableDays = 7.0m,
                            CarriedOverDays = 0.0m,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6658),
                            IsActive = true,
                            LastAccrualDate = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(6657),
                            LeaveTypeId = 6,
                            ManualAdjustment = 0.0m,
                            MonthlyAccrual = 0.0m,
                            PendingDays = 0.0m,
                            PersonId = 21,
                            RemainingDays = 7.0m,
                            UsedDays = 0.0m,
                            Year = 2025
                        });
                });

            modelBuilder.Entity("DAL.Entities.LeaveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanCarryOver")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasDefaultValue("#007bff");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("MaxCarryOverDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("MaxDaysPerYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NotificationDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<bool>("RequiresApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("RequiresDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("LeaveTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanCarryOver = true,
                            Color = "#28a745",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(3953),
                            Description = "Yıllık ücretli izin",
                            IsActive = true,
                            IsPaid = true,
                            MaxCarryOverDays = 5,
                            MaxDaysPerYear = 21,
                            Name = "Yıllık İzin",
                            NotificationDays = 3,
                            RequiresApproval = true,
                            RequiresDocument = false
                        },
                        new
                        {
                            Id = 2,
                            CanCarryOver = false,
                            Color = "#dc3545",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(3959),
                            Description = "Sağlık raporu ile alınan izin",
                            IsActive = true,
                            IsPaid = true,
                            MaxCarryOverDays = 0,
                            MaxDaysPerYear = 0,
                            Name = "Hastalık İzni",
                            NotificationDays = 1,
                            RequiresApproval = true,
                            RequiresDocument = true
                        },
                        new
                        {
                            Id = 3,
                            CanCarryOver = false,
                            Color = "#ff69b4",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(3977),
                            Description = "Annelik ve babalık izni",
                            IsActive = true,
                            IsPaid = true,
                            MaxCarryOverDays = 0,
                            MaxDaysPerYear = 128,
                            Name = "Doğum İzni",
                            NotificationDays = 30,
                            RequiresApproval = true,
                            RequiresDocument = true
                        },
                        new
                        {
                            Id = 4,
                            CanCarryOver = false,
                            Color = "#ffc107",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(3981),
                            Description = "Evlilik için verilen izin",
                            IsActive = true,
                            IsPaid = true,
                            MaxCarryOverDays = 0,
                            MaxDaysPerYear = 3,
                            Name = "Evlilik İzni",
                            NotificationDays = 7,
                            RequiresApproval = true,
                            RequiresDocument = true
                        },
                        new
                        {
                            Id = 5,
                            CanCarryOver = false,
                            Color = "#6c757d",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(3984),
                            Description = "Ücretsiz mazeret izni",
                            IsActive = true,
                            IsPaid = false,
                            MaxCarryOverDays = 0,
                            MaxDaysPerYear = 0,
                            Name = "Mazeret İzni",
                            NotificationDays = 2,
                            RequiresApproval = true,
                            RequiresDocument = false
                        },
                        new
                        {
                            Id = 6,
                            CanCarryOver = false,
                            Color = "#000000",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 582, DateTimeKind.Local).AddTicks(3988),
                            Description = "Yakın akraba ölümü izni",
                            IsActive = true,
                            IsPaid = true,
                            MaxCarryOverDays = 0,
                            MaxDaysPerYear = 7,
                            Name = "Ölüm İzni",
                            NotificationDays = 1,
                            RequiresApproval = true,
                            RequiresDocument = true
                        });
                });

            modelBuilder.Entity("DAL.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConsumable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastPurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MaxStockLevel")
                        .HasColumnType("int");

                    b.Property<int>("MinStockLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Supplier")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Materials", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Ofis Malzemeleri",
                            Code = "OF001",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(8908),
                            Description = "Beyaz A4 yazıcı kağıdı",
                            IsActive = true,
                            IsConsumable = true,
                            LastPurchaseDate = new DateTime(2025, 9, 5, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(8652),
                            Location = "Depo-A-01",
                            MaxStockLevel = 200,
                            MinStockLevel = 20,
                            Name = "A4 Kağıt",
                            OrganizationId = 2,
                            StockQuantity = 150,
                            Supplier = "Kağıt A.Ş.",
                            Unit = "Paket",
                            UnitPrice = 25.50m
                        },
                        new
                        {
                            Id = 2,
                            Category = "Ofis Malzemeleri",
                            Code = "OF002",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(8923),
                            Description = "HP LaserJet toner kartuşu",
                            IsActive = true,
                            IsConsumable = true,
                            LastPurchaseDate = new DateTime(2025, 9, 12, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(8918),
                            Location = "Depo-A-02",
                            MaxStockLevel = 25,
                            MinStockLevel = 5,
                            Name = "Toner Kartuş",
                            OrganizationId = 3,
                            StockQuantity = 12,
                            Supplier = "Teknoloji Ltd.",
                            Unit = "Adet",
                            UnitPrice = 350.00m
                        },
                        new
                        {
                            Id = 3,
                            Category = "Bilgisayar Ekipmanları",
                            Code = "BT001",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(8932),
                            Description = "Mekanik klavye",
                            IsActive = true,
                            IsConsumable = false,
                            LastPurchaseDate = new DateTime(2025, 8, 21, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(8930),
                            Location = "Depo-B-01",
                            MaxStockLevel = 15,
                            MinStockLevel = 3,
                            Name = "Klavye",
                            OrganizationId = 3,
                            StockQuantity = 8,
                            Supplier = "Teknoloji Ltd.",
                            Unit = "Adet",
                            UnitPrice = 150.00m
                        },
                        new
                        {
                            Id = 4,
                            Category = "Bilgisayar Ekipmanları",
                            Code = "BT002",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(8942),
                            Description = "Optik mouse",
                            IsActive = true,
                            IsConsumable = false,
                            LastPurchaseDate = new DateTime(2025, 8, 31, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(8939),
                            Location = "Depo-B-02",
                            MaxStockLevel = 20,
                            MinStockLevel = 5,
                            Name = "Mouse",
                            OrganizationId = 3,
                            StockQuantity = 15,
                            Supplier = "Teknoloji Ltd.",
                            Unit = "Adet",
                            UnitPrice = 75.00m
                        },
                        new
                        {
                            Id = 5,
                            Category = "Temizlik Malzemeleri",
                            Code = "TM001",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(8952),
                            Description = "Genel temizlik deterjanı",
                            IsActive = true,
                            IsConsumable = true,
                            LastPurchaseDate = new DateTime(2025, 9, 8, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(8948),
                            Location = "Depo-C-01",
                            MaxStockLevel = 50,
                            MinStockLevel = 10,
                            Name = "Deterjan",
                            OrganizationId = 1,
                            StockQuantity = 25,
                            Supplier = "Temizlik A.Ş.",
                            Unit = "Litre",
                            UnitPrice = 18.50m
                        },
                        new
                        {
                            Id = 6,
                            Category = "Temizlik Malzemeleri",
                            Code = "TM002",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(8957),
                            Description = "Beyaz kağıt havlu",
                            IsActive = true,
                            IsConsumable = true,
                            LastPurchaseDate = new DateTime(2025, 9, 15, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(8956),
                            Location = "Depo-C-02",
                            MaxStockLevel = 60,
                            MinStockLevel = 15,
                            Name = "Kağıt Havlu",
                            OrganizationId = 1,
                            StockQuantity = 35,
                            Supplier = "Temizlik A.Ş.",
                            Unit = "Paket",
                            UnitPrice = 12.00m
                        },
                        new
                        {
                            Id = 7,
                            Category = "Kırtasiye",
                            Code = "KR001",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(8976),
                            Description = "Mavi tükenmez kalem",
                            IsActive = true,
                            IsConsumable = true,
                            LastPurchaseDate = new DateTime(2025, 9, 10, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(8975),
                            Location = "Depo-A-03",
                            MaxStockLevel = 150,
                            MinStockLevel = 30,
                            Name = "Kalem",
                            OrganizationId = 2,
                            StockQuantity = 100,
                            Supplier = "Kırtasiye Ltd.",
                            Unit = "Adet",
                            UnitPrice = 3.50m
                        },
                        new
                        {
                            Id = 8,
                            Category = "Kırtasiye",
                            Code = "KR002",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(8981),
                            Description = "Plastik klasör dosya",
                            IsActive = true,
                            IsConsumable = false,
                            LastPurchaseDate = new DateTime(2025, 9, 2, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(8980),
                            Location = "Depo-A-04",
                            MaxStockLevel = 80,
                            MinStockLevel = 20,
                            Name = "Dosya",
                            OrganizationId = 2,
                            StockQuantity = 45,
                            Supplier = "Kırtasiye Ltd.",
                            Unit = "Adet",
                            UnitPrice = 8.75m
                        },
                        new
                        {
                            Id = 9,
                            Category = "Ofis Malzemeleri",
                            Code = "OF003",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(8985),
                            Description = "Siyah mürekkep kartuşu",
                            IsActive = true,
                            IsConsumable = true,
                            LastPurchaseDate = new DateTime(2025, 8, 6, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(8984),
                            Location = "Depo-A-05",
                            MaxStockLevel = 20,
                            MinStockLevel = 5,
                            Name = "Yazıcı Mürekkep",
                            OrganizationId = 3,
                            StockQuantity = 2,
                            Supplier = "Teknoloji Ltd.",
                            Unit = "Adet",
                            UnitPrice = 85.00m
                        },
                        new
                        {
                            Id = 10,
                            Category = "Ofis Malzemeleri",
                            Code = "OF004",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(8990),
                            Description = "A3 fotokopi kağıdı",
                            IsActive = true,
                            IsConsumable = true,
                            LastPurchaseDate = new DateTime(2025, 7, 22, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(8989),
                            Location = "Depo-A-06",
                            MaxStockLevel = 15,
                            MinStockLevel = 3,
                            Name = "Fotokopi Kağıdı",
                            OrganizationId = 2,
                            StockQuantity = 1,
                            Supplier = "Kağıt A.Ş.",
                            Unit = "Paket",
                            UnitPrice = 35.00m
                        },
                        new
                        {
                            Id = 11,
                            Category = "Kırtasiye",
                            Code = "KR003",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(8994),
                            Description = "Standart zımba teli",
                            IsActive = true,
                            IsConsumable = true,
                            LastPurchaseDate = new DateTime(2025, 9, 13, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(8993),
                            Location = "Depo-A-07",
                            MaxStockLevel = 30,
                            MinStockLevel = 10,
                            Name = "Zımba Teli",
                            OrganizationId = 2,
                            StockQuantity = 45,
                            Supplier = "Kırtasiye Ltd.",
                            Unit = "Kutu",
                            UnitPrice = 4.50m
                        },
                        new
                        {
                            Id = 12,
                            Category = "Kırtasiye",
                            Code = "KR004",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(9009),
                            Description = "Fosforlu işaretleme kalemi",
                            IsActive = true,
                            IsConsumable = true,
                            LastPurchaseDate = new DateTime(2025, 9, 17, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(8998),
                            Location = "Depo-A-08",
                            MaxStockLevel = 60,
                            MinStockLevel = 20,
                            Name = "Bantlı Kalem",
                            OrganizationId = 2,
                            StockQuantity = 95,
                            Supplier = "Kırtasiye Ltd.",
                            Unit = "Adet",
                            UnitPrice = 6.25m
                        });
                });

            modelBuilder.Entity("DAL.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Manager")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ManagerPersonId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ManagerPersonId");

                    b.HasIndex("Name");

                    b.HasIndex("ParentOrganizationId");

                    b.ToTable("Organizations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "İstanbul, Türkiye",
                            Code = "GM001",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(6800),
                            Description = "Ana organizasyon birimi",
                            Email = "genel@ikys.com",
                            IsActive = true,
                            Manager = "Genel Müdür",
                            ManagerPersonId = 1,
                            Name = "Genel Müdürlük",
                            Phone = "0212 123 45 67"
                        },
                        new
                        {
                            Id = 2,
                            Address = "İstanbul, Türkiye",
                            Code = "IK001",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(6807),
                            Description = "İnsan kaynakları yönetimi",
                            Email = "ik@ikys.com",
                            IsActive = true,
                            Manager = "İK Müdürü",
                            ManagerPersonId = 2,
                            Name = "İnsan Kaynakları Bölümü",
                            ParentOrganizationId = 1,
                            Phone = "0212 123 45 68"
                        },
                        new
                        {
                            Id = 3,
                            Address = "İstanbul, Türkiye",
                            Code = "BI001",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(6811),
                            Description = "Teknoloji ve bilgi işlem",
                            Email = "bi@ikys.com",
                            IsActive = true,
                            Manager = "BI Müdürü",
                            ManagerPersonId = 3,
                            Name = "Bilgi İşlem Bölümü",
                            ParentOrganizationId = 1,
                            Phone = "0212 123 45 69"
                        },
                        new
                        {
                            Id = 4,
                            Address = "İstanbul, Türkiye",
                            Code = "MH001",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 583, DateTimeKind.Local).AddTicks(6815),
                            Description = "Mali işler ve muhasebe",
                            Email = "muhasebe@ikys.com",
                            IsActive = true,
                            Manager = "Muhasebe Müdürü",
                            ManagerPersonId = 5,
                            Name = "Muhasebe Bölümü",
                            ParentOrganizationId = 1,
                            Phone = "0212 123 45 70"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Payroll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Allowances")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("Ek ödemeler (prim, yemek yardımı vs.)");

                    b.Property<decimal>("BasicSalary")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Temel maaş (brüt)");

                    b.Property<decimal>("Bonuses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("İkramiyeler ve primler");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Deductions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("Toplam kesintiler (vergi, SGK vs.)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Bordro açıklaması");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Month")
                        .HasColumnType("int")
                        .HasComment("Bordro ayı (1-12)");

                    b.Property<decimal>("NetSalary")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Net maaş");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2")
                        .HasComment("Maaş ödeme tarihi");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasComment("Bordronun ait olduğu personel ID");

                    b.Property<int?>("PreparedById")
                        .HasColumnType("int")
                        .HasComment("Bordroyu hazırlayan kişi ID");

                    b.Property<DateTime>("PreparedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Bordro hazırlanma tarihi");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("Bordro yılı");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("IX_Payrolls_PersonId");

                    b.HasIndex("PreparedById");

                    b.HasIndex("Year", "Month")
                        .HasDatabaseName("IX_Payrolls_Year_Month");

                    b.HasIndex("PersonId", "Year", "Month")
                        .IsUnique()
                        .HasDatabaseName("IX_Payrolls_PersonId_Year_Month_Unique");

                    b.ToTable("Payrolls", null, t =>
                        {
                            t.HasCheckConstraint("CK_Payrolls_Allowances", "[Allowances] >= 0");

                            t.HasCheckConstraint("CK_Payrolls_BasicSalary", "[BasicSalary] >= 0");

                            t.HasCheckConstraint("CK_Payrolls_Bonuses", "[Bonuses] >= 0");

                            t.HasCheckConstraint("CK_Payrolls_Deductions", "[Deductions] >= 0");

                            t.HasCheckConstraint("CK_Payrolls_Month", "[Month] >= 1 AND [Month] <= 12");

                            t.HasCheckConstraint("CK_Payrolls_Year", "[Year] >= 2020 AND [Year] <= 2030");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Allowances = 3003.24m,
                            BasicSalary = 15000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 4627.65m,
                            Description = "Kasım 2024 Maaşı",
                            IsActive = true,
                            Month = 11,
                            NetSalary = 13375.59m,
                            PaymentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 1,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 2,
                            Allowances = 2140.98m,
                            BasicSalary = 12000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 3654.34m,
                            Description = "Kasım 2024 Maaşı",
                            IsActive = true,
                            Month = 11,
                            NetSalary = 10486.64m,
                            PaymentDate = new DateTime(2024, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 2,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 3,
                            Allowances = 3755.90m,
                            BasicSalary = 18000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 5996.93m,
                            Description = "Kasım 2024 Maaşı",
                            IsActive = true,
                            Month = 11,
                            NetSalary = 15758.97m,
                            PaymentDate = new DateTime(2024, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 3,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 4,
                            Allowances = 2784.44m,
                            BasicSalary = 13000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 4131.25m,
                            Description = "Kasım 2024 Maaşı",
                            IsActive = true,
                            Month = 11,
                            NetSalary = 11653.19m,
                            PaymentDate = new DateTime(2024, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 4,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 5,
                            Allowances = 3868.49m,
                            BasicSalary = 22000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 6881.32m,
                            Description = "Kasım 2024 Maaşı",
                            IsActive = true,
                            Month = 11,
                            NetSalary = 18987.17m,
                            PaymentDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 5,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 6,
                            Allowances = 1946.51m,
                            BasicSalary = 14000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 4399.20m,
                            Description = "Kasım 2024 Maaşı",
                            IsActive = true,
                            Month = 11,
                            NetSalary = 11547.31m,
                            PaymentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 6,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 7,
                            Allowances = 3553.93m,
                            BasicSalary = 16000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 5452.81m,
                            Description = "Kasım 2024 Maaşı",
                            IsActive = true,
                            Month = 11,
                            NetSalary = 14101.12m,
                            PaymentDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 7,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 8,
                            Allowances = 1351.12m,
                            BasicSalary = 11000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 3143.43m,
                            Description = "Kasım 2024 Maaşı",
                            IsActive = true,
                            Month = 11,
                            NetSalary = 9207.69m,
                            PaymentDate = new DateTime(2024, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 8,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 9,
                            Allowances = 5560.68m,
                            BasicSalary = 25000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 8465.26m,
                            Description = "Kasım 2024 Maaşı",
                            IsActive = true,
                            Month = 11,
                            NetSalary = 22095.42m,
                            PaymentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 9,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 10,
                            Allowances = 2790.09m,
                            BasicSalary = 13500m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 4192.87m,
                            Description = "Kasım 2024 Maaşı",
                            IsActive = true,
                            Month = 11,
                            NetSalary = 12097.22m,
                            PaymentDate = new DateTime(2024, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 10,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 11,
                            Allowances = 3466.10m,
                            BasicSalary = 17000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 5644.97m,
                            Description = "Kasım 2024 Maaşı",
                            IsActive = true,
                            Month = 11,
                            NetSalary = 14821.13m,
                            PaymentDate = new DateTime(2024, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 11,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 12,
                            Allowances = 1327.83m,
                            BasicSalary = 12500m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 3670.04m,
                            Description = "Kasım 2024 Maaşı",
                            IsActive = true,
                            Month = 11,
                            NetSalary = 10157.79m,
                            PaymentDate = new DateTime(2024, 11, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 12,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 13,
                            Allowances = 6248.47m,
                            BasicSalary = 28000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 8568.89m,
                            Description = "Kasım 2024 Maaşı",
                            IsActive = true,
                            Month = 11,
                            NetSalary = 25679.58m,
                            PaymentDate = new DateTime(2024, 11, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 13,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 14,
                            Allowances = 3201.28m,
                            BasicSalary = 14500m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 5087.67m,
                            Description = "Kasım 2024 Maaşı",
                            IsActive = true,
                            Month = 11,
                            NetSalary = 12613.61m,
                            PaymentDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 14,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 15,
                            Allowances = 2324.99m,
                            BasicSalary = 19000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 5359.33m,
                            Description = "Kasım 2024 Maaşı",
                            IsActive = true,
                            Month = 11,
                            NetSalary = 15965.66m,
                            PaymentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 15,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 16,
                            Allowances = 2498.33m,
                            BasicSalary = 11500m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 3938.05m,
                            Description = "Kasım 2024 Maaşı",
                            IsActive = true,
                            Month = 11,
                            NetSalary = 10060.28m,
                            PaymentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 16,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 17,
                            Allowances = 3574.85m,
                            BasicSalary = 26000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 8535.94m,
                            Description = "Kasım 2024 Maaşı",
                            IsActive = true,
                            Month = 11,
                            NetSalary = 21038.91m,
                            PaymentDate = new DateTime(2024, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 17,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 18,
                            Allowances = 2603.33m,
                            BasicSalary = 13200m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 4064.34m,
                            Description = "Kasım 2024 Maaşı",
                            IsActive = true,
                            Month = 11,
                            NetSalary = 11738.99m,
                            PaymentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 18,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 19,
                            Allowances = 3336.97m,
                            BasicSalary = 17500m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 5746.75m,
                            Description = "Kasım 2024 Maaşı",
                            IsActive = true,
                            Month = 11,
                            NetSalary = 15090.22m,
                            PaymentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 19,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 20,
                            Allowances = 3750.26m,
                            BasicSalary = 23000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 7632.63m,
                            Description = "Kasım 2024 Maaşı",
                            IsActive = true,
                            Month = 11,
                            NetSalary = 19117.63m,
                            PaymentDate = new DateTime(2024, 11, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 20,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 21,
                            Allowances = 1885.29m,
                            BasicSalary = 14200m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 4031.98m,
                            Description = "Kasım 2024 Maaşı",
                            IsActive = true,
                            Month = 11,
                            NetSalary = 12053.31m,
                            PaymentDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 21,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 22,
                            Allowances = 2101.74m,
                            BasicSalary = 15000m,
                            Bonuses = 8014.96m,
                            CreatedAt = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 7181.08m,
                            Description = "Aralık 2024 Maaşı + Yılsonu İkramiyesi",
                            IsActive = true,
                            Month = 12,
                            NetSalary = 17935.62m,
                            PaymentDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 1,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 23,
                            Allowances = 2035.37m,
                            BasicSalary = 12000m,
                            Bonuses = 6072.20m,
                            CreatedAt = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 5828.99m,
                            Description = "Aralık 2024 Maaşı + Yılsonu İkramiyesi",
                            IsActive = true,
                            Month = 12,
                            NetSalary = 14278.58m,
                            PaymentDate = new DateTime(2024, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 2,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 24,
                            Allowances = 3186.44m,
                            BasicSalary = 18000m,
                            Bonuses = 13496.37m,
                            CreatedAt = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 8686.23m,
                            Description = "Aralık 2024 Maaşı + Yılsonu İkramiyesi",
                            IsActive = true,
                            Month = 12,
                            NetSalary = 25996.58m,
                            PaymentDate = new DateTime(2024, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 3,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 25,
                            Allowances = 1325.15m,
                            BasicSalary = 13000m,
                            Bonuses = 6519.98m,
                            CreatedAt = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 5277.75m,
                            Description = "Aralık 2024 Maaşı + Yılsonu İkramiyesi",
                            IsActive = true,
                            Month = 12,
                            NetSalary = 15567.38m,
                            PaymentDate = new DateTime(2024, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 4,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 26,
                            Allowances = 2313.98m,
                            BasicSalary = 22000m,
                            Bonuses = 21048.66m,
                            CreatedAt = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 13447.69m,
                            Description = "Aralık 2024 Maaşı + Yılsonu İkramiyesi",
                            IsActive = true,
                            Month = 12,
                            NetSalary = 31914.95m,
                            PaymentDate = new DateTime(2024, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 5,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 27,
                            Allowances = 2188.20m,
                            BasicSalary = 14000m,
                            Bonuses = 11316.24m,
                            CreatedAt = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 6937.23m,
                            Description = "Aralık 2024 Maaşı + Yılsonu İkramiyesi",
                            IsActive = true,
                            Month = 12,
                            NetSalary = 20567.21m,
                            PaymentDate = new DateTime(2024, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 6,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 28,
                            Allowances = 1940.51m,
                            BasicSalary = 16000m,
                            Bonuses = 11495.61m,
                            CreatedAt = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 8525.12m,
                            Description = "Aralık 2024 Maaşı + Yılsonu İkramiyesi",
                            IsActive = true,
                            Month = 12,
                            NetSalary = 20911.00m,
                            PaymentDate = new DateTime(2024, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 7,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 29,
                            Allowances = 1761.15m,
                            BasicSalary = 11000m,
                            Bonuses = 7135.55m,
                            CreatedAt = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 5876.75m,
                            Description = "Aralık 2024 Maaşı + Yılsonu İkramiyesi",
                            IsActive = true,
                            Month = 12,
                            NetSalary = 14019.95m,
                            PaymentDate = new DateTime(2024, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 8,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 30,
                            Allowances = 5256.64m,
                            BasicSalary = 25000m,
                            Bonuses = 12742.65m,
                            CreatedAt = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 12645.40m,
                            Description = "Aralık 2024 Maaşı + Yılsonu İkramiyesi",
                            IsActive = true,
                            Month = 12,
                            NetSalary = 30353.89m,
                            PaymentDate = new DateTime(2024, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 9,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 31,
                            Allowances = 2023.99m,
                            BasicSalary = 13500m,
                            Bonuses = 11547.22m,
                            CreatedAt = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 6987.57m,
                            Description = "Aralık 2024 Maaşı + Yılsonu İkramiyesi",
                            IsActive = true,
                            Month = 12,
                            NetSalary = 20083.64m,
                            PaymentDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 10,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 32,
                            Allowances = 2852.99m,
                            BasicSalary = 17000m,
                            Bonuses = 11332.62m,
                            CreatedAt = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 9006.58m,
                            Description = "Aralık 2024 Maaşı + Yılsonu İkramiyesi",
                            IsActive = true,
                            Month = 12,
                            NetSalary = 22179.03m,
                            PaymentDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 11,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 33,
                            Allowances = 1502.55m,
                            BasicSalary = 12500m,
                            Bonuses = 7597.88m,
                            CreatedAt = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 6039.12m,
                            Description = "Aralık 2024 Maaşı + Yılsonu İkramiyesi",
                            IsActive = true,
                            Month = 12,
                            NetSalary = 15561.31m,
                            PaymentDate = new DateTime(2024, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 12,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 34,
                            Allowances = 6945.49m,
                            BasicSalary = 28000m,
                            Bonuses = 24727.12m,
                            CreatedAt = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 16923.28m,
                            Description = "Aralık 2024 Maaşı + Yılsonu İkramiyesi",
                            IsActive = true,
                            Month = 12,
                            NetSalary = 42749.33m,
                            PaymentDate = new DateTime(2024, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 13,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 35,
                            Allowances = 2079.61m,
                            BasicSalary = 14500m,
                            Bonuses = 11252.44m,
                            CreatedAt = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 8335.46m,
                            Description = "Aralık 2024 Maaşı + Yılsonu İkramiyesi",
                            IsActive = true,
                            Month = 12,
                            NetSalary = 19496.59m,
                            PaymentDate = new DateTime(2024, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 14,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 36,
                            Allowances = 1969.02m,
                            BasicSalary = 19000m,
                            Bonuses = 12781.37m,
                            CreatedAt = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 10005.41m,
                            Description = "Aralık 2024 Maaşı + Yılsonu İkramiyesi",
                            IsActive = true,
                            Month = 12,
                            NetSalary = 23744.98m,
                            PaymentDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 15,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 37,
                            Allowances = 1529.06m,
                            BasicSalary = 11500m,
                            Bonuses = 7276.30m,
                            CreatedAt = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 5115.41m,
                            Description = "Aralık 2024 Maaşı + Yılsonu İkramiyesi",
                            IsActive = true,
                            Month = 12,
                            NetSalary = 15189.95m,
                            PaymentDate = new DateTime(2024, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 16,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 38,
                            Allowances = 4910.12m,
                            BasicSalary = 26000m,
                            Bonuses = 18488.78m,
                            CreatedAt = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 12581.24m,
                            Description = "Aralık 2024 Maaşı + Yılsonu İkramiyesi",
                            IsActive = true,
                            Month = 12,
                            NetSalary = 36817.66m,
                            PaymentDate = new DateTime(2024, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 17,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 39,
                            Allowances = 1560.36m,
                            BasicSalary = 13200m,
                            Bonuses = 7300.22m,
                            CreatedAt = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 5869.56m,
                            Description = "Aralık 2024 Maaşı + Yılsonu İkramiyesi",
                            IsActive = true,
                            Month = 12,
                            NetSalary = 16191.02m,
                            PaymentDate = new DateTime(2024, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 18,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 40,
                            Allowances = 3721.77m,
                            BasicSalary = 17500m,
                            Bonuses = 15975.99m,
                            CreatedAt = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 9316.26m,
                            Description = "Aralık 2024 Maaşı + Yılsonu İkramiyesi",
                            IsActive = true,
                            Month = 12,
                            NetSalary = 27881.50m,
                            PaymentDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 19,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 41,
                            Allowances = 5199.71m,
                            BasicSalary = 23000m,
                            Bonuses = 21802.79m,
                            CreatedAt = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 13095.84m,
                            Description = "Aralık 2024 Maaşı + Yılsonu İkramiyesi",
                            IsActive = true,
                            Month = 12,
                            NetSalary = 36906.66m,
                            PaymentDate = new DateTime(2024, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 20,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 42,
                            Allowances = 3220.46m,
                            BasicSalary = 14200m,
                            Bonuses = 9084.07m,
                            CreatedAt = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 7348.84m,
                            Description = "Aralık 2024 Maaşı + Yılsonu İkramiyesi",
                            IsActive = true,
                            Month = 12,
                            NetSalary = 19155.69m,
                            PaymentDate = new DateTime(2024, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 21,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 43,
                            Allowances = 2906.99m,
                            BasicSalary = 15000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 4648.93m,
                            Description = "Ocak 2025 Maaşı",
                            IsActive = true,
                            Month = 1,
                            NetSalary = 13258.06m,
                            PaymentDate = new DateTime(2025, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 1,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2025
                        },
                        new
                        {
                            Id = 44,
                            Allowances = 1529.48m,
                            BasicSalary = 12000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 3402.38m,
                            Description = "Ocak 2025 Maaşı",
                            IsActive = true,
                            Month = 1,
                            NetSalary = 10127.10m,
                            PaymentDate = new DateTime(2025, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 2,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2025
                        },
                        new
                        {
                            Id = 45,
                            Allowances = 4320.35m,
                            BasicSalary = 18000m,
                            Bonuses = 5354.74m,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 8000.37m,
                            Description = "Ocak 2025 Maaşı",
                            IsActive = true,
                            Month = 1,
                            NetSalary = 19674.72m,
                            PaymentDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 3,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2025
                        },
                        new
                        {
                            Id = 46,
                            Allowances = 3022.62m,
                            BasicSalary = 13000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 4155.23m,
                            Description = "Ocak 2025 Maaşı",
                            IsActive = true,
                            Month = 1,
                            NetSalary = 11867.39m,
                            PaymentDate = new DateTime(2025, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 4,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2025
                        },
                        new
                        {
                            Id = 47,
                            Allowances = 4047.96m,
                            BasicSalary = 22000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 7236.40m,
                            Description = "Ocak 2025 Maaşı",
                            IsActive = true,
                            Month = 1,
                            NetSalary = 18811.56m,
                            PaymentDate = new DateTime(2025, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 5,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2025
                        },
                        new
                        {
                            Id = 48,
                            Allowances = 1656.05m,
                            BasicSalary = 14000m,
                            Bonuses = 3074.90m,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 5049.35m,
                            Description = "Ocak 2025 Maaşı",
                            IsActive = true,
                            Month = 1,
                            NetSalary = 13681.60m,
                            PaymentDate = new DateTime(2025, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 6,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2025
                        },
                        new
                        {
                            Id = 49,
                            Allowances = 2667.79m,
                            BasicSalary = 16000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 4991.96m,
                            Description = "Ocak 2025 Maaşı",
                            IsActive = true,
                            Month = 1,
                            NetSalary = 13675.83m,
                            PaymentDate = new DateTime(2025, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 7,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2025
                        },
                        new
                        {
                            Id = 50,
                            Allowances = 1865.02m,
                            BasicSalary = 11000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 3565.55m,
                            Description = "Ocak 2025 Maaşı",
                            IsActive = true,
                            Month = 1,
                            NetSalary = 9299.47m,
                            PaymentDate = new DateTime(2025, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 8,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2025
                        },
                        new
                        {
                            Id = 51,
                            Allowances = 5538.76m,
                            BasicSalary = 25000m,
                            Bonuses = 3141.61m,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 8600.84m,
                            Description = "Ocak 2025 Maaşı",
                            IsActive = true,
                            Month = 1,
                            NetSalary = 25079.53m,
                            PaymentDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 9,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2025
                        },
                        new
                        {
                            Id = 52,
                            Allowances = 1718.26m,
                            BasicSalary = 13500m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 4520.05m,
                            Description = "Ocak 2025 Maaşı",
                            IsActive = true,
                            Month = 1,
                            NetSalary = 10698.21m,
                            PaymentDate = new DateTime(2025, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 10,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2025
                        },
                        new
                        {
                            Id = 53,
                            Allowances = 2730.21m,
                            BasicSalary = 17000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 5515.38m,
                            Description = "Ocak 2025 Maaşı",
                            IsActive = true,
                            Month = 1,
                            NetSalary = 14214.83m,
                            PaymentDate = new DateTime(2025, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 11,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2025
                        },
                        new
                        {
                            Id = 54,
                            Allowances = 1484.28m,
                            BasicSalary = 12500m,
                            Bonuses = 3526.72m,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 5221.69m,
                            Description = "Ocak 2025 Maaşı",
                            IsActive = true,
                            Month = 1,
                            NetSalary = 12289.31m,
                            PaymentDate = new DateTime(2025, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 12,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2025
                        },
                        new
                        {
                            Id = 55,
                            Allowances = 3525.06m,
                            BasicSalary = 28000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 8407.55m,
                            Description = "Ocak 2025 Maaşı",
                            IsActive = true,
                            Month = 1,
                            NetSalary = 23117.51m,
                            PaymentDate = new DateTime(2025, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 13,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2025
                        },
                        new
                        {
                            Id = 56,
                            Allowances = 2789.65m,
                            BasicSalary = 14500m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 5137.13m,
                            Description = "Ocak 2025 Maaşı",
                            IsActive = true,
                            Month = 1,
                            NetSalary = 12152.52m,
                            PaymentDate = new DateTime(2025, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 14,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2025
                        },
                        new
                        {
                            Id = 57,
                            Allowances = 4029.85m,
                            BasicSalary = 19000m,
                            Bonuses = 2965.93m,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 6940.46m,
                            Description = "Ocak 2025 Maaşı",
                            IsActive = true,
                            Month = 1,
                            NetSalary = 19055.32m,
                            PaymentDate = new DateTime(2025, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 15,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2025
                        },
                        new
                        {
                            Id = 58,
                            Allowances = 2537.40m,
                            BasicSalary = 11500m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 3682.79m,
                            Description = "Ocak 2025 Maaşı",
                            IsActive = true,
                            Month = 1,
                            NetSalary = 10354.61m,
                            PaymentDate = new DateTime(2025, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 16,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2025
                        },
                        new
                        {
                            Id = 59,
                            Allowances = 5191.23m,
                            BasicSalary = 26000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 8093.44m,
                            Description = "Ocak 2025 Maaşı",
                            IsActive = true,
                            Month = 1,
                            NetSalary = 23097.79m,
                            PaymentDate = new DateTime(2025, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 17,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2025
                        },
                        new
                        {
                            Id = 60,
                            Allowances = 1772.45m,
                            BasicSalary = 13200m,
                            Bonuses = 3520.75m,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 5215.11m,
                            Description = "Ocak 2025 Maaşı",
                            IsActive = true,
                            Month = 1,
                            NetSalary = 13278.09m,
                            PaymentDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 18,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2025
                        },
                        new
                        {
                            Id = 61,
                            Allowances = 2853.84m,
                            BasicSalary = 17500m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 5907.84m,
                            Description = "Ocak 2025 Maaşı",
                            IsActive = true,
                            Month = 1,
                            NetSalary = 14446.00m,
                            PaymentDate = new DateTime(2025, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 19,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2025
                        },
                        new
                        {
                            Id = 62,
                            Allowances = 4986.84m,
                            BasicSalary = 23000m,
                            Bonuses = 0m,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 8330.79m,
                            Description = "Ocak 2025 Maaşı",
                            IsActive = true,
                            Month = 1,
                            NetSalary = 19656.05m,
                            PaymentDate = new DateTime(2025, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 20,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2025
                        },
                        new
                        {
                            Id = 63,
                            Allowances = 2413.88m,
                            BasicSalary = 14200m,
                            Bonuses = 3949.77m,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deductions = 6137.42m,
                            Description = "Ocak 2025 Maaşı",
                            IsActive = true,
                            Month = 1,
                            NetSalary = 14426.23m,
                            PaymentDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 21,
                            PreparedById = 1,
                            PreparedDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2025
                        });
                });

            modelBuilder.Entity("DAL.Entities.PerformanceGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Hedef açıklaması");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Hedef notları");

                    b.Property<int>("PerformanceReviewId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasComment("Hedef önceliği");

                    b.Property<int>("ProgressPercentage")
                        .HasColumnType("int")
                        .HasComment("İlerleme yüzdesi (0-100)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Hedef durumu");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Hedef başlığı");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PerformanceReviewId")
                        .HasDatabaseName("IX_PerformanceGoals_PerformanceReviewId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_PerformanceGoals_Status");

                    b.HasIndex("TargetDate")
                        .HasDatabaseName("IX_PerformanceGoals_TargetDate");

                    b.ToTable("PerformanceGoals", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.PerformanceReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Achievements")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("Başarılar");

                    b.Property<int>("AdaptabilityScore")
                        .HasColumnType("int")
                        .HasComment("Uyum skoru (1-5)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<string>("AreasForImprovement")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("Gelişim alanları");

                    b.Property<int>("CommunicationScore")
                        .HasColumnType("int")
                        .HasComment("İletişim skoru (1-5)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeComments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("Çalışan yorumları");

                    b.Property<string>("Goals")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("Hedefler");

                    b.Property<int>("InitiativeScore")
                        .HasColumnType("int")
                        .HasComment("İnisiyatif skoru (1-5)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSelfAssessmentCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("JobQualityScore")
                        .HasColumnType("int")
                        .HasComment("İş kalitesi skoru (1-5)");

                    b.Property<int>("LeadershipScore")
                        .HasColumnType("int")
                        .HasComment("Liderlik skoru (1-5)");

                    b.Property<int>("OverallScore")
                        .HasColumnType("int")
                        .HasComment("Genel değerlendirme skoru (1-5)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("ProblemSolvingScore")
                        .HasColumnType("int")
                        .HasComment("Problem çözme skoru (1-5)");

                    b.Property<int>("ProductivityScore")
                        .HasColumnType("int")
                        .HasComment("Üretkenlik skoru (1-5)");

                    b.Property<int>("ReviewPeriodId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewerComments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("Değerlendiren yorumları");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int");

                    b.Property<string>("SelfAssessmentComments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("Öz değerlendirme yorumları");

                    b.Property<DateTime?>("SelfAssessmentCompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SelfOverallScore")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Değerlendirme durumu");

                    b.Property<string>("Strengths")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("Güçlü yönler");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeamworkScore")
                        .HasColumnType("int")
                        .HasComment("Ekip çalışması skoru (1-5)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("IX_PerformanceReviews_PersonId");

                    b.HasIndex("ReviewPeriodId")
                        .HasDatabaseName("IX_PerformanceReviews_ReviewPeriodId");

                    b.HasIndex("ReviewerId")
                        .HasDatabaseName("IX_PerformanceReviews_ReviewerId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_PerformanceReviews_Status");

                    b.HasIndex("PersonId", "ReviewPeriodId")
                        .IsUnique()
                        .HasDatabaseName("IX_PerformanceReviews_Person_Period");

                    b.ToTable("PerformanceReviews", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthPlace")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BloodType")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DriverLicenseClass")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("EducationLevel")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmployeeNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MilitaryStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MotherName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("Religion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SskNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("SskStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TcKimlikNo")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PositionId");

                    b.HasIndex("TcKimlikNo")
                        .IsUnique();

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5548),
                            DepartmentId = 1,
                            Email = "ahmet.yilmaz@company.com",
                            EmployeeNumber = "EMP001",
                            FirstName = "Ahmet",
                            HireDate = new DateTime(2023, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5117),
                            IsActive = true,
                            LastName = "Yılmaz",
                            Phone = "0555 123 45 67",
                            PositionId = 1,
                            Salary = 15000m,
                            TcKimlikNo = "12345678901"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5562),
                            DepartmentId = 1,
                            Email = "fatma.kaya@company.com",
                            EmployeeNumber = "EMP002",
                            FirstName = "Fatma",
                            HireDate = new DateTime(2024, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5557),
                            IsActive = true,
                            LastName = "Kaya",
                            Phone = "0555 123 45 68",
                            PositionId = 1,
                            Salary = 12000m,
                            TcKimlikNo = "12345678902"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5595),
                            DepartmentId = 2,
                            Email = "mehmet.demir@company.com",
                            EmployeeNumber = "EMP003",
                            FirstName = "Mehmet",
                            HireDate = new DateTime(2025, 1, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5566),
                            IsActive = true,
                            LastName = "Demir",
                            Phone = "0555 123 45 69",
                            PositionId = 2,
                            Salary = 18000m,
                            TcKimlikNo = "12345678903"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5601),
                            DepartmentId = 1,
                            Email = "ayse.sahin@company.com",
                            EmployeeNumber = "EMP004",
                            FirstName = "Ayşe",
                            HireDate = new DateTime(2025, 3, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5600),
                            IsActive = true,
                            LastName = "Şahin",
                            Phone = "0555 123 45 70",
                            PositionId = 1,
                            Salary = 13000m,
                            TcKimlikNo = "12345678904"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5667),
                            DepartmentId = 3,
                            Email = "can.ozkan@company.com",
                            EmployeeNumber = "EMP005",
                            FirstName = "Can",
                            HireDate = new DateTime(2022, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5665),
                            IsActive = true,
                            LastName = "Özkan",
                            Phone = "0555 123 45 71",
                            PositionId = 3,
                            Salary = 22000m,
                            TcKimlikNo = "12345678905"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5673),
                            DepartmentId = 2,
                            Email = "elif.yildiz@company.com",
                            EmployeeNumber = "EMP006",
                            FirstName = "Elif",
                            HireDate = new DateTime(2024, 11, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5671),
                            IsActive = true,
                            LastName = "Yıldız",
                            Phone = "0555 123 45 72",
                            PositionId = 1,
                            Salary = 14000m,
                            TcKimlikNo = "12345678906"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5691),
                            DepartmentId = 1,
                            Email = "burak.arslan@company.com",
                            EmployeeNumber = "EMP007",
                            FirstName = "Burak",
                            HireDate = new DateTime(2024, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5677),
                            IsActive = true,
                            LastName = "Arslan",
                            Phone = "0555 123 45 73",
                            PositionId = 2,
                            Salary = 16000m,
                            TcKimlikNo = "12345678907"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5697),
                            DepartmentId = 3,
                            Email = "zeynep.kurt@company.com",
                            EmployeeNumber = "EMP008",
                            FirstName = "Zeynep",
                            HireDate = new DateTime(2025, 5, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5696),
                            IsActive = true,
                            LastName = "Kurt",
                            Phone = "0555 123 45 74",
                            PositionId = 1,
                            Salary = 11000m,
                            TcKimlikNo = "12345678908"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5703),
                            DepartmentId = 2,
                            Email = "emre.celik@company.com",
                            EmployeeNumber = "EMP009",
                            FirstName = "Emre",
                            HireDate = new DateTime(2023, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5701),
                            IsActive = true,
                            LastName = "Çelik",
                            Phone = "0555 123 45 75",
                            PositionId = 4,
                            Salary = 25000m,
                            TcKimlikNo = "12345678909"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5708),
                            DepartmentId = 1,
                            Email = "seda.polat@company.com",
                            EmployeeNumber = "EMP010",
                            FirstName = "Seda",
                            HireDate = new DateTime(2025, 2, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5707),
                            IsActive = true,
                            LastName = "Polat",
                            Phone = "0555 123 45 76",
                            PositionId = 1,
                            Salary = 13500m,
                            TcKimlikNo = "12345678910"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5713),
                            DepartmentId = 3,
                            Email = "kerem.aydin@company.com",
                            EmployeeNumber = "EMP011",
                            FirstName = "Kerem",
                            HireDate = new DateTime(2024, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5711),
                            IsActive = true,
                            LastName = "Aydın",
                            Phone = "0555 123 45 77",
                            PositionId = 2,
                            Salary = 17000m,
                            TcKimlikNo = "12345678911"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5718),
                            DepartmentId = 2,
                            Email = "gizem.turan@company.com",
                            EmployeeNumber = "EMP012",
                            FirstName = "Gizem",
                            HireDate = new DateTime(2025, 4, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5717),
                            IsActive = true,
                            LastName = "Turan",
                            Phone = "0555 123 45 78",
                            PositionId = 1,
                            Salary = 12500m,
                            TcKimlikNo = "12345678912"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5723),
                            DepartmentId = 1,
                            Email = "cem.oz@company.com",
                            EmployeeNumber = "EMP013",
                            FirstName = "Cem",
                            HireDate = new DateTime(2021, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5722),
                            IsActive = true,
                            LastName = "Öz",
                            Phone = "0555 123 45 79",
                            PositionId = 3,
                            Salary = 28000m,
                            TcKimlikNo = "12345678913"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5741),
                            DepartmentId = 3,
                            Email = "deniz.koc@company.com",
                            EmployeeNumber = "EMP014",
                            FirstName = "Deniz",
                            HireDate = new DateTime(2024, 12, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5739),
                            IsActive = true,
                            LastName = "Koç",
                            Phone = "0555 123 45 80",
                            PositionId = 1,
                            Salary = 14500m,
                            TcKimlikNo = "12345678914"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5747),
                            DepartmentId = 2,
                            Email = "murat.aktas@company.com",
                            EmployeeNumber = "EMP015",
                            FirstName = "Murat",
                            HireDate = new DateTime(2023, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5745),
                            IsActive = true,
                            LastName = "Aktaş",
                            Phone = "0555 123 45 81",
                            PositionId = 2,
                            Salary = 19000m,
                            TcKimlikNo = "12345678915"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5754),
                            DepartmentId = 1,
                            Email = "pinar.gunes@company.com",
                            EmployeeNumber = "EMP016",
                            FirstName = "Pınar",
                            HireDate = new DateTime(2025, 6, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5751),
                            IsActive = true,
                            LastName = "Güneş",
                            Phone = "0555 123 45 82",
                            PositionId = 1,
                            Salary = 11500m,
                            TcKimlikNo = "12345678916"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5761),
                            DepartmentId = 3,
                            Email = "okan.bulut@company.com",
                            EmployeeNumber = "EMP017",
                            FirstName = "Okan",
                            HireDate = new DateTime(2022, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5759),
                            IsActive = true,
                            LastName = "Bulut",
                            Phone = "0555 123 45 83",
                            PositionId = 4,
                            Salary = 26000m,
                            TcKimlikNo = "12345678917"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5766),
                            DepartmentId = 2,
                            Email = "nihan.erdogan@company.com",
                            EmployeeNumber = "EMP018",
                            FirstName = "Nihan",
                            HireDate = new DateTime(2025, 3, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5764),
                            IsActive = true,
                            LastName = "Erdoğan",
                            Phone = "0555 123 45 84",
                            PositionId = 1,
                            Salary = 13200m,
                            TcKimlikNo = "12345678918"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5771),
                            DepartmentId = 1,
                            Email = "tolga.yavuz@company.com",
                            EmployeeNumber = "EMP019",
                            FirstName = "Tolga",
                            HireDate = new DateTime(2024, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5769),
                            IsActive = true,
                            LastName = "Yavuz",
                            Phone = "0555 123 45 85",
                            PositionId = 2,
                            Salary = 17500m,
                            TcKimlikNo = "12345678919"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5788),
                            DepartmentId = 3,
                            Email = "esra.tan@company.com",
                            EmployeeNumber = "EMP020",
                            FirstName = "Esra",
                            HireDate = new DateTime(2023, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5786),
                            IsActive = true,
                            LastName = "Tan",
                            Phone = "0555 123 45 86",
                            PositionId = 3,
                            Salary = 23000m,
                            TcKimlikNo = "12345678920"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5866),
                            DepartmentId = 1,
                            Email = "serkan.cakir@company.com",
                            EmployeeNumber = "EMP021",
                            FirstName = "Serkan",
                            HireDate = new DateTime(2025, 1, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(5864),
                            IsActive = true,
                            LastName = "Çakır",
                            Phone = "0555 123 45 87",
                            PositionId = 1,
                            Salary = 14200m,
                            TcKimlikNo = "12345678921"
                        });
                });

            modelBuilder.Entity("DAL.Entities.PersonSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AssessedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AssessedById")
                        .HasColumnType("int");

                    b.Property<string>("CertificationAuthority")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CertificationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CertificationExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("CertificationName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("EndorsedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EndorsedById")
                        .HasColumnType("int");

                    b.Property<string>("EndorsementNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ExperienceMonths")
                        .HasColumnType("int");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCertified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEndorsed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSelfAssessed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectExamples")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("SkillTemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssessedById");

                    b.HasIndex("EndorsedById");

                    b.HasIndex("IsCertified");

                    b.HasIndex("Level");

                    b.HasIndex("PersonId");

                    b.HasIndex("SkillTemplateId");

                    b.HasIndex("PersonId", "SkillTemplateId")
                        .IsUnique();

                    b.ToTable("PersonSkills", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(2452),
                            ExperienceYears = 5,
                            IsActive = true,
                            IsCertified = false,
                            IsEndorsed = false,
                            IsSelfAssessed = true,
                            Level = 4,
                            PersonId = 1,
                            SkillTemplateId = 1,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(2453)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(2458),
                            ExperienceYears = 4,
                            IsActive = true,
                            IsCertified = false,
                            IsEndorsed = false,
                            IsSelfAssessed = true,
                            Level = 4,
                            PersonId = 1,
                            SkillTemplateId = 2,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(2458)
                        },
                        new
                        {
                            Id = 3,
                            CertificationAuthority = "Microsoft",
                            CertificationDate = new DateTime(2025, 3, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(2461),
                            CertificationExpiry = new DateTime(2027, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(2595),
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(2807),
                            ExperienceYears = 3,
                            IsActive = true,
                            IsCertified = true,
                            IsEndorsed = false,
                            IsSelfAssessed = false,
                            Level = 3,
                            PersonId = 1,
                            SkillTemplateId = 3,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(2808)
                        },
                        new
                        {
                            Id = 4,
                            CertificationAuthority = "ETS",
                            CertificationDate = new DateTime(2024, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(2812),
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(2814),
                            ExperienceYears = 8,
                            IsActive = true,
                            IsCertified = true,
                            IsEndorsed = false,
                            IsSelfAssessed = false,
                            Level = 3,
                            PersonId = 1,
                            SkillTemplateId = 6,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(2814)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(2817),
                            ExperienceYears = 4,
                            IsActive = true,
                            IsCertified = false,
                            IsEndorsed = false,
                            IsSelfAssessed = true,
                            Level = 3,
                            PersonId = 2,
                            SkillTemplateId = 5,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(2818)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(2820),
                            ExperienceYears = 6,
                            IsActive = true,
                            IsCertified = false,
                            IsEndorsed = false,
                            IsSelfAssessed = true,
                            Level = 4,
                            PersonId = 2,
                            SkillTemplateId = 7,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(2821)
                        },
                        new
                        {
                            Id = 7,
                            CertificationAuthority = "Cambridge",
                            CertificationDate = new DateTime(2025, 1, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(2872),
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(2874),
                            ExperienceYears = 10,
                            IsActive = true,
                            IsCertified = true,
                            IsEndorsed = false,
                            IsSelfAssessed = false,
                            Level = 4,
                            PersonId = 2,
                            SkillTemplateId = 6,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(2875)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(2878),
                            ExperienceYears = 2,
                            IsActive = true,
                            IsCertified = false,
                            IsEndorsed = false,
                            IsSelfAssessed = true,
                            Level = 3,
                            PersonId = 3,
                            SkillTemplateId = 7,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(2878)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(2896),
                            ExperienceYears = 5,
                            IsActive = true,
                            IsCertified = false,
                            IsEndorsed = false,
                            IsSelfAssessed = true,
                            Level = 2,
                            PersonId = 3,
                            SkillTemplateId = 6,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(2896)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(3351),
                            EndorsedAt = new DateTime(2025, 9, 5, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(3104),
                            EndorsedById = 1,
                            EndorsementNotes = "Mükemmel C# becerileri, takım liderliği yapabilir",
                            ExperienceYears = 8,
                            IsActive = true,
                            IsCertified = false,
                            IsEndorsed = true,
                            IsSelfAssessed = false,
                            Level = 5,
                            PersonId = 4,
                            SkillTemplateId = 1,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(3352)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(3359),
                            EndorsedAt = new DateTime(2025, 9, 5, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(3357),
                            EndorsedById = 1,
                            ExperienceYears = 6,
                            IsActive = true,
                            IsCertified = false,
                            IsEndorsed = true,
                            IsSelfAssessed = false,
                            Level = 5,
                            PersonId = 4,
                            SkillTemplateId = 2,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(3360)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(3363),
                            ExperienceYears = 5,
                            IsActive = true,
                            IsCertified = false,
                            IsEndorsed = false,
                            IsSelfAssessed = true,
                            Level = 4,
                            PersonId = 4,
                            SkillTemplateId = 4,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(3363)
                        },
                        new
                        {
                            Id = 13,
                            CertificationAuthority = "Microsoft",
                            CertificationDate = new DateTime(2025, 6, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(3366),
                            CertificationExpiry = new DateTime(2028, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(3367),
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(3369),
                            ExperienceYears = 2,
                            IsActive = true,
                            IsCertified = true,
                            IsEndorsed = false,
                            IsSelfAssessed = false,
                            Level = 3,
                            PersonId = 4,
                            SkillTemplateId = 8,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(3370)
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(3372),
                            ExperienceYears = 1,
                            IsActive = true,
                            IsCertified = false,
                            IsEndorsed = false,
                            IsSelfAssessed = true,
                            Level = 2,
                            PersonId = 5,
                            SkillTemplateId = 1,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(3374)
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(3378),
                            ExperienceYears = 1,
                            IsActive = true,
                            IsCertified = false,
                            IsEndorsed = false,
                            IsSelfAssessed = true,
                            Level = 2,
                            PersonId = 5,
                            SkillTemplateId = 4,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(3381)
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(3384),
                            ExperienceYears = 4,
                            IsActive = true,
                            IsCertified = false,
                            IsEndorsed = false,
                            IsSelfAssessed = true,
                            Level = 3,
                            PersonId = 5,
                            SkillTemplateId = 6,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(3385)
                        });
                });

            modelBuilder.Entity("DAL.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EmploymentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("MaxSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RequiredExperience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Requirements")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Responsibilities")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("IsAvailable");

                    b.HasIndex("Name");

                    b.ToTable("Positions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(2865),
                            DepartmentId = 1,
                            Description = "İnsan kaynakları süreçlerini yönetir, personel işlemleri ile ilgilenir",
                            EmploymentType = "Tam Zamanlı",
                            IsActive = true,
                            IsAvailable = false,
                            Level = "Mid-Level",
                            MaxSalary = 18000m,
                            MinSalary = 12000m,
                            Name = "İnsan Kaynakları Uzmanı",
                            RequiredExperience = 2,
                            Requirements = "Lisans mezunu, İnsan Kaynakları veya İşletme bölümü tercih edilir",
                            Responsibilities = "Personel işlemleri, bordro hazırlama, izin takibi, performans değerlendirme"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(2874),
                            DepartmentId = 2,
                            Description = "Web ve mobil uygulamalar geliştirir, sistem bakımı yapar",
                            EmploymentType = "Tam Zamanlı",
                            IsActive = true,
                            IsAvailable = true,
                            Level = "Senior",
                            MaxSalary = 25000m,
                            MinSalary = 15000m,
                            Name = "Yazılım Geliştirici",
                            RequiredExperience = 3,
                            Requirements = "Bilgisayar Mühendisliği mezunu, C#, .NET, SQL bilgisi",
                            Responsibilities = "Yazılım geliştirme, kod review, sistem analizi, dokümantasyon"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(2879),
                            DepartmentId = 3,
                            Description = "Mali işleri yönetir, finansal raporlama yapar",
                            EmploymentType = "Tam Zamanlı",
                            IsActive = true,
                            IsAvailable = true,
                            Level = "Junior",
                            MaxSalary = 15000m,
                            MinSalary = 10000m,
                            Name = "Muhasebe Uzmanı",
                            RequiredExperience = 1,
                            Requirements = "İşletme veya İktisat mezunu, LUCA, Logo programları bilgisi",
                            Responsibilities = "Muhasebe kayıtları, mali raporlama, bütçe hazırlama, vergi işlemleri"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(2884),
                            DepartmentId = 2,
                            Description = "Departmanlarda öğrenme ve gelişim süreci",
                            EmploymentType = "Stajyer",
                            IsActive = true,
                            IsAvailable = true,
                            Level = "Stajyer",
                            MaxSalary = 7000m,
                            MinSalary = 5000m,
                            Name = "Stajyer",
                            RequiredExperience = 0,
                            Requirements = "Üniversite 3. veya 4. sınıf öğrencisi",
                            Responsibilities = "Mentorluk eşliğinde proje desteği, öğrenme aktiviteleri"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CredentialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasExpiration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuingAuthority")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Level")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("ExpirationDate");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonId", "Category");

                    b.ToTable("Qualifications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Teknik",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(9450),
                            CredentialNumber = "AZ-900-2023-001",
                            Description = "Azure bulut hizmetleri temel bilgileri ve sertifikasyonu",
                            ExpirationDate = new DateTime(2026, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasExpiration = true,
                            IsActive = true,
                            IssueDate = new DateTime(2023, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssuingAuthority = "Microsoft",
                            Level = "Başlangıç",
                            Location = "İstanbul",
                            Name = "Microsoft Azure Fundamentals",
                            PersonId = 1,
                            Score = 85
                        },
                        new
                        {
                            Id = 2,
                            Category = "Dil",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(9459),
                            CredentialNumber = "IELTS-2023-789456",
                            Description = "İngilizce dil yeterlilik sınavı - Akademik modül",
                            ExpirationDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasExpiration = true,
                            IsActive = true,
                            IssueDate = new DateTime(2023, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssuingAuthority = "British Council",
                            Level = "B2",
                            Location = "Ankara",
                            Name = "IELTS Academic",
                            PersonId = 1,
                            Score = 75
                        },
                        new
                        {
                            Id = 3,
                            Category = "Güvenlik",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 581, DateTimeKind.Local).AddTicks(9476),
                            CredentialNumber = "ISGUY-2022-15478",
                            Description = "İş sağlığı ve güvenliği alanında uzman yardımcısı sertifikası",
                            HasExpiration = false,
                            IsActive = true,
                            IssueDate = new DateTime(2022, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssuingAuthority = "Çalışma ve Sosyal Güvenlik Bakanlığı",
                            Level = "Uzman",
                            Location = "Ankara",
                            Name = "İş Güvenliği Uzman Yardımcısı",
                            PersonId = 1
                        });
                });

            modelBuilder.Entity("DAL.Entities.QualificationMatchingResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CalculatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CertificationMatch")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EducationMatch")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("ExperienceMatch")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("JobDefinitionId")
                        .HasColumnType("int");

                    b.Property<string>("MatchingDetails")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("MissingRequirements")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("OverallMatchPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<decimal>("PreferredSkillsMatch")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Recommendations")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("RequiredSkillsMatch")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ReviewNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReviewedById")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("JobDefinitionId");

                    b.HasIndex("OverallMatchPercentage");

                    b.HasIndex("PersonId");

                    b.HasIndex("ReviewedById");

                    b.HasIndex("Status");

                    b.HasIndex("JobDefinitionId", "PersonId")
                        .IsUnique();

                    b.ToTable("QualificationMatchingResults", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DAL.Entities.ReviewPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Değerlendirme dönemi açıklaması");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Dönem bitiş tarihi");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Değerlendirme dönemi adı");

                    b.Property<DateTime>("ReviewEndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Değerlendirme bitiş tarihi");

                    b.Property<DateTime>("ReviewStartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Değerlendirme başlangıç tarihi");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Dönem başlangıç tarihi");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("Değerlendirme dönemi türü");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_ReviewPeriods_IsActive");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_ReviewPeriods_Name");

                    b.HasIndex("StartDate", "EndDate")
                        .HasDatabaseName("IX_ReviewPeriods_DateRange");

                    b.ToTable("ReviewPeriods", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.SkillAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssessedLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssessmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssessmentMethod")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("AssessorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImprovementAreas")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<int>("PersonSkillId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonSkillId1")
                        .HasColumnType("int");

                    b.Property<string>("Recommendations")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentDate");

                    b.HasIndex("AssessorId");

                    b.HasIndex("PersonSkillId");

                    b.HasIndex("PersonSkillId1");

                    b.HasIndex("Type");

                    b.ToTable("SkillAssessments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssessedLevel = 4,
                            AssessmentDate = new DateTime(2025, 9, 10, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(4299),
                            AssessorId = 4,
                            CreatedAt = new DateTime(2025, 9, 10, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(4700),
                            Feedback = "Çok iyi kod kalitesi, best practices'i takip ediyor. Devam etsin, liderlik becerileri geliştirebilir.",
                            IsActive = true,
                            IsValid = true,
                            PersonSkillId = 1,
                            Score = 8,
                            Type = 3,
                            UpdatedAt = new DateTime(2025, 9, 10, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(4701),
                            ValidUntil = new DateTime(2026, 3, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(4585)
                        },
                        new
                        {
                            Id = 2,
                            AssessedLevel = 5,
                            AssessmentDate = new DateTime(2025, 9, 15, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(4705),
                            AssessorId = 1,
                            CreatedAt = new DateTime(2025, 9, 15, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(4709),
                            Feedback = "Uzman seviyede, kompleks problemleri çözebiliyor. Takım mentorluk görevlerini üstlenebilir.",
                            IsActive = true,
                            IsValid = true,
                            PersonSkillId = 10,
                            Score = 10,
                            Type = 4,
                            UpdatedAt = new DateTime(2025, 9, 15, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(4710),
                            ValidUntil = new DateTime(2026, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(4708)
                        },
                        new
                        {
                            Id = 3,
                            AssessedLevel = 4,
                            AssessmentDate = new DateTime(2025, 8, 31, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(4713),
                            AssessorId = 2,
                            CreatedAt = new DateTime(2025, 8, 31, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(4715),
                            Feedback = "Takım içi iletişimde çok başarılı. Sunum becerileri geliştirilebilir.",
                            IsActive = true,
                            IsValid = true,
                            PersonSkillId = 6,
                            Score = 8,
                            Type = 1,
                            UpdatedAt = new DateTime(2025, 8, 31, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(4717),
                            ValidUntil = new DateTime(2025, 12, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(4714)
                        });
                });

            modelBuilder.Entity("DAL.Entities.SkillTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerifiable")
                        .HasColumnType("bit");

                    b.Property<string>("Keywords")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LevelDescriptions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("MaxLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RelatedSkills")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("RequiresCertification")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.Property<string>("VerificationMethod")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Type");

                    b.ToTable("SkillTemplates", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Programlama",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(1128),
                            Description = ".NET Framework ve .NET Core kullanarak C# ile uygulama geliştirme becerisi",
                            IsActive = true,
                            IsVerifiable = true,
                            Keywords = "C#, .NET, OOP, SOLID",
                            LevelDescriptions = "1:Temel | 2:Başlangıç | 3:Orta | 4:İleri | 5:Uzman",
                            MaxLevel = 5,
                            Name = "C# Programlama",
                            RelatedSkills = "ASP.NET, Entity Framework",
                            RequiresCertification = false,
                            Type = 1,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(1133),
                            UsageCount = 0,
                            VerificationMethod = "Proje bazlı değerlendirme"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Web Geliştirme",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(1145),
                            Description = "ASP.NET Core kullanarak web uygulamaları ve API geliştirme",
                            IsActive = true,
                            IsVerifiable = true,
                            Keywords = "ASP.NET Core, MVC, Web API, Razor",
                            LevelDescriptions = "1:Temel | 2:Başlangıç | 3:Orta | 4:İleri | 5:Uzman",
                            MaxLevel = 5,
                            Name = "ASP.NET Core",
                            RelatedSkills = "C#, JavaScript, HTML, CSS",
                            RequiresCertification = false,
                            Type = 1,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(1145),
                            UsageCount = 0,
                            VerificationMethod = "Proje ve kod incelemesi"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Veritabanı",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(1150),
                            Description = "Microsoft SQL Server ile veritabanı tasarımı ve yönetimi",
                            IsActive = true,
                            IsVerifiable = true,
                            Keywords = "SQL, T-SQL, Stored Procedures, Indexing",
                            LevelDescriptions = "1:Temel | 2:Başlangıç | 3:Orta | 4:İleri | 5:Uzman",
                            MaxLevel = 5,
                            Name = "SQL Server",
                            RelatedSkills = "Entity Framework, Database Design",
                            RequiresCertification = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(1151),
                            UsageCount = 0,
                            VerificationMethod = "SQL sorguları ve performans testleri"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Frontend Geliştirme",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(1154),
                            Description = "JavaScript ve ES6+ özellikleri ile frontend geliştirme",
                            IsActive = true,
                            IsVerifiable = true,
                            Keywords = "JavaScript, ES6, DOM, Async/Await",
                            LevelDescriptions = "1:Temel | 2:Başlangıç | 3:Orta | 4:İleri | 5:Uzman",
                            MaxLevel = 5,
                            Name = "JavaScript",
                            RelatedSkills = "HTML, CSS, React, Vue.js",
                            RequiresCertification = false,
                            Type = 1,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(1155),
                            UsageCount = 0,
                            VerificationMethod = "Kod incelemesi ve proje değerlendirmesi"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Yönetim",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(1158),
                            Description = "Proje planlama, takip ve yönetim becerileri",
                            IsActive = true,
                            IsVerifiable = true,
                            Keywords = "PMP, Agile, Scrum, Kanban",
                            LevelDescriptions = "1:Temel | 2:Başlangıç | 3:Orta | 4:İleri | 5:Uzman",
                            MaxLevel = 5,
                            Name = "Proje Yönetimi",
                            RelatedSkills = "Liderlik, İletişim, Risk Yönetimi",
                            RequiresCertification = true,
                            Type = 2,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(1159),
                            UsageCount = 0,
                            VerificationMethod = "Proje başarı oranları ve takım geri bildirimleri"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Dil",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(1162),
                            Description = "İngilizce dil yeterliliği - konuşma, okuma, yazma",
                            IsActive = true,
                            IsVerifiable = true,
                            Keywords = "English, TOEFL, IELTS, Business English",
                            LevelDescriptions = "1:Başlangıç | 2:Temel | 3:Orta | 4:İleri | 5:İleri Düzey",
                            MaxLevel = 5,
                            Name = "İngilizce",
                            RelatedSkills = "İletişim, Sunum",
                            RequiresCertification = true,
                            Type = 3,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(1163),
                            UsageCount = 0,
                            VerificationMethod = "TOEFL, IELTS veya kurumsal dil sınavı"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Kişisel Gelişim",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(1166),
                            Description = "Etkili iletişim kurma ve sürdürme becerileri",
                            IsActive = true,
                            IsVerifiable = true,
                            Keywords = "Communication, Interpersonal, Presentation",
                            LevelDescriptions = "1:Temel | 2:Gelişen | 3:Yeterli | 4:İyi | 5:Mükemmel",
                            MaxLevel = 5,
                            Name = "İletişim",
                            RelatedSkills = "Liderlik, Takım Çalışması",
                            RequiresCertification = false,
                            Type = 2,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(1167),
                            UsageCount = 0,
                            VerificationMethod = "360 derece değerlendirme"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Cloud Computing",
                            CreatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(1182),
                            Description = "Microsoft Azure platformu ile cloud çözümleri geliştirme",
                            IsActive = true,
                            IsVerifiable = true,
                            Keywords = "Azure, Cloud, DevOps, Containers",
                            LevelDescriptions = "1:Fundamentals | 2:Associate | 3:Expert | 4:Architect | 5:Master",
                            MaxLevel = 5,
                            Name = "Azure Cloud",
                            RelatedSkills = "C#, PowerShell, Kubernetes",
                            RequiresCertification = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 57, 10, 584, DateTimeKind.Local).AddTicks(1183),
                            UsageCount = 0,
                            VerificationMethod = "Microsoft Azure sertifikaları"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserLoginLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FailureReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLoginLogs");
                });

            modelBuilder.Entity("DAL.Entities.WorkLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApprovalNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<decimal>("BreakDurationMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<TimeSpan?>("BreakEndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("BreakStartTime")
                        .HasColumnType("time");

                    b.Property<string>("CheckInIP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CheckOutIP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEarlyDeparture")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsHoliday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsLateArrival")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsOvertime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsWeekend")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("OvertimeHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<decimal>("RegularHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Active");

                    b.Property<string>("TasksCompleted")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("TotalHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Office");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("Date");

                    b.HasIndex("PersonId");

                    b.HasIndex("Status");

                    b.HasIndex("WorkType");

                    b.HasIndex("PersonId", "Date")
                        .IsUnique()
                        .HasDatabaseName("IX_WorkLogs_PersonId_Date");

                    b.ToTable("WorkLogs", null, t =>
                        {
                            t.HasCheckConstraint("CK_WorkLog_BreakDuration", "[BreakDurationMinutes] >= 0 AND [BreakDurationMinutes] <= 480");

                            t.HasCheckConstraint("CK_WorkLog_OvertimeHours", "[OvertimeHours] >= 0 AND [OvertimeHours] <= 24");

                            t.HasCheckConstraint("CK_WorkLog_RegularHours", "[RegularHours] >= 0 AND [RegularHours] <= 24");

                            t.HasCheckConstraint("CK_WorkLog_TotalHours", "[TotalHours] >= 0 AND [TotalHours] <= 24");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BreakDurationMinutes = 60m,
                            CreatedAt = new DateTime(2025, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsHoliday = false,
                            IsLateArrival = false,
                            IsOvertime = false,
                            IsWeekend = false,
                            Notes = "İlk hafta",
                            OvertimeHours = 0m,
                            PersonId = 1,
                            RegularHours = 8.0m,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Status = "Approved",
                            TotalHours = 8.0m,
                            WorkType = "Office"
                        },
                        new
                        {
                            Id = 2,
                            BreakDurationMinutes = 60m,
                            CreatedAt = new DateTime(2025, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 18, 15, 0, 0),
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsHoliday = false,
                            IsLateArrival = true,
                            IsOvertime = false,
                            IsWeekend = false,
                            Notes = "Geç başlangıç",
                            OvertimeHours = 0m,
                            PersonId = 2,
                            RegularHours = 8.0m,
                            StartTime = new TimeSpan(0, 9, 15, 0, 0),
                            Status = "Approved",
                            TotalHours = 8.0m,
                            WorkType = "Office"
                        },
                        new
                        {
                            Id = 3,
                            BreakDurationMinutes = 90m,
                            CreatedAt = new DateTime(2025, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 19, 30, 0, 0),
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsHoliday = false,
                            IsLateArrival = false,
                            IsOvertime = true,
                            IsWeekend = false,
                            Notes = "Proje mesaisi",
                            OvertimeHours = 1.5m,
                            PersonId = 3,
                            RegularHours = 8.0m,
                            StartTime = new TimeSpan(0, 8, 30, 0, 0),
                            Status = "Approved",
                            TotalHours = 9.5m,
                            WorkType = "Office"
                        },
                        new
                        {
                            Id = 4,
                            BreakDurationMinutes = 60m,
                            CreatedAt = new DateTime(2025, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 17, 30, 0, 0),
                            IsActive = true,
                            IsEarlyDeparture = true,
                            IsHoliday = false,
                            IsLateArrival = false,
                            IsOvertime = false,
                            IsWeekend = false,
                            Notes = "Evden çalışma",
                            OvertimeHours = 0m,
                            PersonId = 4,
                            RegularHours = 7.5m,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Status = "Pending",
                            TotalHours = 7.5m,
                            WorkType = "Remote"
                        },
                        new
                        {
                            Id = 5,
                            BreakDurationMinutes = 120m,
                            CreatedAt = new DateTime(2025, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsHoliday = false,
                            IsLateArrival = false,
                            IsOvertime = true,
                            IsWeekend = false,
                            Notes = "Yönetim toplantısı",
                            OvertimeHours = 1.25m,
                            PersonId = 5,
                            RegularHours = 8.0m,
                            StartTime = new TimeSpan(0, 8, 45, 0, 0),
                            Status = "Approved",
                            TotalHours = 9.25m,
                            WorkType = "Office"
                        },
                        new
                        {
                            Id = 6,
                            BreakDurationMinutes = 60m,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 17, 30, 0, 0),
                            IsActive = true,
                            IsEarlyDeparture = true,
                            IsHoliday = false,
                            IsLateArrival = true,
                            IsOvertime = false,
                            IsWeekend = false,
                            Notes = "Ay başı geç gelme",
                            OvertimeHours = 0m,
                            PersonId = 6,
                            RegularHours = 7.0m,
                            StartTime = new TimeSpan(0, 9, 30, 0, 0),
                            Status = "Pending",
                            TotalHours = 7.0m,
                            WorkType = "Office"
                        },
                        new
                        {
                            Id = 7,
                            BreakDurationMinutes = 60m,
                            CreatedAt = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 18, 45, 0, 0),
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsHoliday = false,
                            IsLateArrival = false,
                            IsOvertime = true,
                            IsWeekend = false,
                            Notes = "Proje teslimi",
                            OvertimeHours = 1.0m,
                            PersonId = 7,
                            RegularHours = 8.0m,
                            StartTime = new TimeSpan(0, 8, 45, 0, 0),
                            Status = "Approved",
                            TotalHours = 9.0m,
                            WorkType = "Office"
                        },
                        new
                        {
                            Id = 8,
                            BreakDurationMinutes = 60m,
                            CreatedAt = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsHoliday = false,
                            IsLateArrival = false,
                            IsOvertime = false,
                            IsWeekend = false,
                            Notes = "Uzaktan mesai",
                            OvertimeHours = 0m,
                            PersonId = 8,
                            RegularHours = 8.0m,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Status = "Completed",
                            TotalHours = 8.0m,
                            WorkType = "Remote"
                        },
                        new
                        {
                            Id = 9,
                            BreakDurationMinutes = 90m,
                            CreatedAt = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 19, 30, 0, 0),
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsHoliday = false,
                            IsLateArrival = false,
                            IsOvertime = true,
                            IsWeekend = false,
                            Notes = "Departman koordinasyonu",
                            OvertimeHours = 1.5m,
                            PersonId = 9,
                            RegularHours = 8.0m,
                            StartTime = new TimeSpan(0, 8, 30, 0, 0),
                            Status = "Approved",
                            TotalHours = 9.5m,
                            WorkType = "Office"
                        },
                        new
                        {
                            Id = 10,
                            BreakDurationMinutes = 60m,
                            CreatedAt = new DateTime(2025, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 17, 45, 0, 0),
                            IsActive = true,
                            IsEarlyDeparture = true,
                            IsHoliday = false,
                            IsLateArrival = true,
                            IsOvertime = false,
                            IsWeekend = false,
                            Notes = "Kısmi mesai",
                            OvertimeHours = 0m,
                            PersonId = 10,
                            RegularHours = 7.5m,
                            StartTime = new TimeSpan(0, 9, 15, 0, 0),
                            Status = "Pending",
                            TotalHours = 7.5m,
                            WorkType = "Office"
                        },
                        new
                        {
                            Id = 11,
                            BreakDurationMinutes = 60m,
                            CreatedAt = new DateTime(2025, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 18, 30, 0, 0),
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsHoliday = false,
                            IsLateArrival = false,
                            IsOvertime = true,
                            IsWeekend = false,
                            Notes = "Kasım başlangıcı",
                            OvertimeHours = 0.7m,
                            PersonId = 11,
                            RegularHours = 8.0m,
                            StartTime = new TimeSpan(0, 8, 50, 0, 0),
                            Status = "Approved",
                            TotalHours = 8.7m,
                            WorkType = "Office"
                        },
                        new
                        {
                            Id = 12,
                            BreakDurationMinutes = 60m,
                            CreatedAt = new DateTime(2025, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsHoliday = false,
                            IsLateArrival = false,
                            IsOvertime = false,
                            IsWeekend = false,
                            Notes = "Evden tam mesai",
                            OvertimeHours = 0m,
                            PersonId = 12,
                            RegularHours = 8.0m,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Status = "Approved",
                            TotalHours = 8.0m,
                            WorkType = "Remote"
                        },
                        new
                        {
                            Id = 13,
                            BreakDurationMinutes = 120m,
                            CreatedAt = new DateTime(2025, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsHoliday = false,
                            IsLateArrival = false,
                            IsOvertime = true,
                            IsWeekend = false,
                            Notes = "Stratejik planlama",
                            OvertimeHours = 2.0m,
                            PersonId = 13,
                            RegularHours = 8.0m,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Status = "Approved",
                            TotalHours = 10.0m,
                            WorkType = "Office"
                        },
                        new
                        {
                            Id = 14,
                            BreakDurationMinutes = 60m,
                            CreatedAt = new DateTime(2025, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 17, 20, 0, 0),
                            IsActive = true,
                            IsEarlyDeparture = true,
                            IsHoliday = false,
                            IsLateArrival = true,
                            IsOvertime = false,
                            IsWeekend = false,
                            Notes = "Doktor raporu",
                            OvertimeHours = 0m,
                            PersonId = 14,
                            RegularHours = 7.0m,
                            StartTime = new TimeSpan(0, 9, 20, 0, 0),
                            Status = "Pending",
                            TotalHours = 7.0m,
                            WorkType = "Office"
                        },
                        new
                        {
                            Id = 15,
                            BreakDurationMinutes = 90m,
                            CreatedAt = new DateTime(2025, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 19, 15, 0, 0),
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsHoliday = false,
                            IsLateArrival = false,
                            IsOvertime = true,
                            IsWeekend = false,
                            Notes = "Proje kapanışı",
                            OvertimeHours = 1.5m,
                            PersonId = 15,
                            RegularHours = 8.0m,
                            StartTime = new TimeSpan(0, 8, 45, 0, 0),
                            Status = "Approved",
                            TotalHours = 9.5m,
                            WorkType = "Office"
                        },
                        new
                        {
                            Id = 16,
                            BreakDurationMinutes = 60m,
                            CreatedAt = new DateTime(2025, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 18, 15, 0, 0),
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsHoliday = false,
                            IsLateArrival = false,
                            IsOvertime = true,
                            IsWeekend = false,
                            Notes = "Aralık ayı normal mesai",
                            OvertimeHours = 0.25m,
                            PersonId = 16,
                            RegularHours = 8.0m,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Status = "Approved",
                            TotalHours = 8.25m,
                            WorkType = "Office"
                        },
                        new
                        {
                            Id = 17,
                            BreakDurationMinutes = 45m,
                            CreatedAt = new DateTime(2025, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 17, 45, 0, 0),
                            IsActive = true,
                            IsEarlyDeparture = true,
                            IsHoliday = false,
                            IsLateArrival = true,
                            IsOvertime = false,
                            IsWeekend = false,
                            Notes = "Evden çalışma - trafik sebebiyle geç",
                            OvertimeHours = 0m,
                            PersonId = 17,
                            RegularHours = 7.7m,
                            StartTime = new TimeSpan(0, 9, 20, 0, 0),
                            Status = "Completed",
                            TotalHours = 7.7m,
                            WorkType = "Remote"
                        },
                        new
                        {
                            Id = 18,
                            BreakDurationMinutes = 0m,
                            CreatedAt = new DateTime(2025, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsHoliday = false,
                            IsLateArrival = false,
                            IsOvertime = false,
                            IsWeekend = false,
                            Notes = "Aktif çalışma günü - devam ediyor",
                            OvertimeHours = 0m,
                            PersonId = 18,
                            RegularHours = 0m,
                            StartTime = new TimeSpan(0, 8, 45, 0, 0),
                            Status = "Active",
                            TotalHours = 0m,
                            WorkType = "Office"
                        },
                        new
                        {
                            Id = 19,
                            BreakDurationMinutes = 60m,
                            CreatedAt = new DateTime(2025, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsHoliday = false,
                            IsLateArrival = false,
                            IsOvertime = false,
                            IsWeekend = false,
                            Notes = "Son hafta çalışması",
                            OvertimeHours = 0m,
                            PersonId = 19,
                            RegularHours = 8.0m,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Status = "Approved",
                            TotalHours = 8.0m,
                            WorkType = "Office"
                        },
                        new
                        {
                            Id = 20,
                            BreakDurationMinutes = 90m,
                            CreatedAt = new DateTime(2025, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 19, 30, 0, 0),
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsHoliday = false,
                            IsLateArrival = false,
                            IsOvertime = true,
                            IsWeekend = false,
                            Notes = "Yıl sonu yoğunluğu",
                            OvertimeHours = 1.5m,
                            PersonId = 20,
                            RegularHours = 8.0m,
                            StartTime = new TimeSpan(0, 8, 30, 0, 0),
                            Status = "Approved",
                            TotalHours = 9.5m,
                            WorkType = "Office"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.ApplicationDocument", b =>
                {
                    b.HasOne("DAL.Entities.JobApplication", "JobApplication")
                        .WithMany("Documents")
                        .HasForeignKey("JobApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationDocuments_JobApplications");

                    b.HasOne("DAL.Entities.ApplicationUser", "LastDownloadedBy")
                        .WithMany()
                        .HasForeignKey("LastDownloadedById");

                    b.HasOne("DAL.Entities.ApplicationUser", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById");

                    b.HasOne("DAL.Entities.ApplicationUser", "VerifiedBy")
                        .WithMany()
                        .HasForeignKey("VerifiedById");

                    b.Navigation("JobApplication");

                    b.Navigation("LastDownloadedBy");

                    b.Navigation("UploadedBy");

                    b.Navigation("VerifiedBy");
                });

            modelBuilder.Entity("DAL.Entities.ApplicationUser", b =>
                {
                    b.HasOne("DAL.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("DAL.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.Navigation("Department");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DAL.Entities.Department", b =>
                {
                    b.HasOne("DAL.Entities.Department", "ParentDepartment")
                        .WithMany("SubDepartments")
                        .HasForeignKey("ParentDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("DAL.Entities.Education", b =>
                {
                    b.HasOne("DAL.Entities.Person", "Person")
                        .WithMany("Educations")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DAL.Entities.JobApplication", b =>
                {
                    b.HasOne("DAL.Entities.JobPosting", null)
                        .WithMany("Applications")
                        .HasForeignKey("JobPostingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_JobApplications_JobPostings");

                    b.HasOne("DAL.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_JobApplications_Positions");

                    b.HasOne("DAL.Entities.Person", "ReviewedBy")
                        .WithMany()
                        .HasForeignKey("ReviewedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_JobApplications_ReviewedBy");

                    b.Navigation("Position");

                    b.Navigation("ReviewedBy");
                });

            modelBuilder.Entity("DAL.Entities.JobDefinition", b =>
                {
                    b.HasOne("DAL.Entities.Person", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DAL.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Entities.JobDefinition", "PreviousVersion")
                        .WithMany()
                        .HasForeignKey("PreviousVersionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApprovedBy");

                    b.Navigation("Position");

                    b.Navigation("PreviousVersion");
                });

            modelBuilder.Entity("DAL.Entities.JobDefinitionQualification", b =>
                {
                    b.HasOne("DAL.Entities.JobDefinition", "JobDefinition")
                        .WithMany("RequiredQualifications")
                        .HasForeignKey("JobDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobDefinition");
                });

            modelBuilder.Entity("DAL.Entities.JobPosting", b =>
                {
                    b.HasOne("DAL.Entities.Person", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_JobPostings_CreatedBy");

                    b.HasOne("DAL.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_JobPostings_Departments");

                    b.HasOne("DAL.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_JobPostings_Positions");

                    b.HasOne("DAL.Entities.Person", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_JobPostings_UpdatedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("Department");

                    b.Navigation("Position");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("DAL.Entities.JobRequiredSkill", b =>
                {
                    b.HasOne("DAL.Entities.JobDefinition", "JobDefinition")
                        .WithMany()
                        .HasForeignKey("JobDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.JobDefinition", null)
                        .WithMany("JobRequiredSkills")
                        .HasForeignKey("JobDefinitionId1");

                    b.HasOne("DAL.Entities.SkillTemplate", "SkillTemplate")
                        .WithMany("JobRequiredSkills")
                        .HasForeignKey("SkillTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("JobDefinition");

                    b.Navigation("SkillTemplate");
                });

            modelBuilder.Entity("DAL.Entities.Leave", b =>
                {
                    b.HasOne("DAL.Entities.Person", "ApprovedBy")
                        .WithMany("ApprovedLeaves")
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DAL.Entities.Person", "HandoverToPerson")
                        .WithMany("HandoverLeaves")
                        .HasForeignKey("HandoverToPersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DAL.Entities.LeaveType", "LeaveType")
                        .WithMany("Leaves")
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Person", "Person")
                        .WithMany("Leaves")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("HandoverToPerson");

                    b.Navigation("LeaveType");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DAL.Entities.LeaveBalance", b =>
                {
                    b.HasOne("DAL.Entities.LeaveType", "LeaveType")
                        .WithMany("LeaveBalances")
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Person", "Person")
                        .WithMany("LeaveBalances")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeaveType");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DAL.Entities.Material", b =>
                {
                    b.HasOne("DAL.Entities.Organization", "Organization")
                        .WithMany("Materials")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DAL.Entities.Organization", b =>
                {
                    b.HasOne("DAL.Entities.Person", "ManagerPerson")
                        .WithMany()
                        .HasForeignKey("ManagerPersonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DAL.Entities.Organization", "ParentOrganization")
                        .WithMany("SubOrganizations")
                        .HasForeignKey("ParentOrganizationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ManagerPerson");

                    b.Navigation("ParentOrganization");
                });

            modelBuilder.Entity("DAL.Entities.Payroll", b =>
                {
                    b.HasOne("DAL.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Payrolls_Persons_PersonId");

                    b.HasOne("DAL.Entities.Person", "PreparedBy")
                        .WithMany()
                        .HasForeignKey("PreparedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Payrolls_Persons_PreparedById");

                    b.Navigation("Person");

                    b.Navigation("PreparedBy");
                });

            modelBuilder.Entity("DAL.Entities.PerformanceGoal", b =>
                {
                    b.HasOne("DAL.Entities.PerformanceReview", "PerformanceReview")
                        .WithMany("Goals_Navigation")
                        .HasForeignKey("PerformanceReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PerformanceGoals_PerformanceReview");

                    b.Navigation("PerformanceReview");
                });

            modelBuilder.Entity("DAL.Entities.PerformanceReview", b =>
                {
                    b.HasOne("DAL.Entities.Person", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_PerformanceReviews_ApprovedBy");

                    b.HasOne("DAL.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PerformanceReviews_Person");

                    b.HasOne("DAL.Entities.ReviewPeriod", "ReviewPeriod")
                        .WithMany("PerformanceReviews")
                        .HasForeignKey("ReviewPeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PerformanceReviews_ReviewPeriod");

                    b.HasOne("DAL.Entities.Person", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PerformanceReviews_Reviewer");

                    b.Navigation("ApprovedBy");

                    b.Navigation("Person");

                    b.Navigation("ReviewPeriod");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("DAL.Entities.Person", b =>
                {
                    b.HasOne("DAL.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DAL.Entities.Position", "Position")
                        .WithMany("Persons")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("DAL.Entities.PersonSkill", b =>
                {
                    b.HasOne("DAL.Entities.Person", "AssessedBy")
                        .WithMany()
                        .HasForeignKey("AssessedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DAL.Entities.Person", "EndorsedBy")
                        .WithMany()
                        .HasForeignKey("EndorsedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DAL.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.SkillTemplate", "SkillTemplate")
                        .WithMany("PersonSkills")
                        .HasForeignKey("SkillTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssessedBy");

                    b.Navigation("EndorsedBy");

                    b.Navigation("Person");

                    b.Navigation("SkillTemplate");
                });

            modelBuilder.Entity("DAL.Entities.Position", b =>
                {
                    b.HasOne("DAL.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("DAL.Entities.Qualification", b =>
                {
                    b.HasOne("DAL.Entities.Person", "Person")
                        .WithMany("Qualifications")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DAL.Entities.QualificationMatchingResult", b =>
                {
                    b.HasOne("DAL.Entities.JobDefinition", "JobDefinition")
                        .WithMany("MatchingResults")
                        .HasForeignKey("JobDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Person", "ReviewedBy")
                        .WithMany()
                        .HasForeignKey("ReviewedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("JobDefinition");

                    b.Navigation("Person");

                    b.Navigation("ReviewedBy");
                });

            modelBuilder.Entity("DAL.Entities.RefreshToken", b =>
                {
                    b.HasOne("DAL.Entities.ApplicationUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.SkillAssessment", b =>
                {
                    b.HasOne("DAL.Entities.Person", "Assessor")
                        .WithMany()
                        .HasForeignKey("AssessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Entities.PersonSkill", "PersonSkill")
                        .WithMany()
                        .HasForeignKey("PersonSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.PersonSkill", null)
                        .WithMany("SkillAssessments")
                        .HasForeignKey("PersonSkillId1");

                    b.Navigation("Assessor");

                    b.Navigation("PersonSkill");
                });

            modelBuilder.Entity("DAL.Entities.UserLoginLog", b =>
                {
                    b.HasOne("DAL.Entities.ApplicationUser", "User")
                        .WithMany("LoginLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.WorkLog", b =>
                {
                    b.HasOne("DAL.Entities.Person", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DAL.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("DAL.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("DAL.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.ApplicationUser", b =>
                {
                    b.Navigation("LoginLogs");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("DAL.Entities.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("SubDepartments");
                });

            modelBuilder.Entity("DAL.Entities.JobApplication", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("DAL.Entities.JobDefinition", b =>
                {
                    b.Navigation("JobRequiredSkills");

                    b.Navigation("MatchingResults");

                    b.Navigation("RequiredQualifications");
                });

            modelBuilder.Entity("DAL.Entities.JobPosting", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("DAL.Entities.LeaveType", b =>
                {
                    b.Navigation("LeaveBalances");

                    b.Navigation("Leaves");
                });

            modelBuilder.Entity("DAL.Entities.Organization", b =>
                {
                    b.Navigation("Materials");

                    b.Navigation("SubOrganizations");
                });

            modelBuilder.Entity("DAL.Entities.PerformanceReview", b =>
                {
                    b.Navigation("Goals_Navigation");
                });

            modelBuilder.Entity("DAL.Entities.Person", b =>
                {
                    b.Navigation("ApprovedLeaves");

                    b.Navigation("Educations");

                    b.Navigation("HandoverLeaves");

                    b.Navigation("LeaveBalances");

                    b.Navigation("Leaves");

                    b.Navigation("Qualifications");
                });

            modelBuilder.Entity("DAL.Entities.PersonSkill", b =>
                {
                    b.Navigation("SkillAssessments");
                });

            modelBuilder.Entity("DAL.Entities.Position", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("DAL.Entities.ReviewPeriod", b =>
                {
                    b.Navigation("PerformanceReviews");
                });

            modelBuilder.Entity("DAL.Entities.SkillTemplate", b =>
                {
                    b.Navigation("JobRequiredSkills");

                    b.Navigation("PersonSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
